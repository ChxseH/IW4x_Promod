#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\gametypes\_hud_util;
init(){level.primary_weapon_array=[];weapon_class_register("m16_mp","weapon_assault");weapon_class_register("m16_silencer_mp","weapon_assault");weapon_class_register("ak47_mp","weapon_assault");weapon_class_register("ak47_silencer_mp","weapon_assault");weapon_class_register("m4_mp","weapon_assault");weapon_class_register("m4_silencer_mp","weapon_assault");weapon_class_register("famas_mp","weapon_assault");weapon_class_register("famas_silencer_mp","weapon_assault");weapon_class_register("scar_mp","weapon_assault");weapon_class_register("scar_silencer_mp","weapon_assault");weapon_class_register("tavor_mp","weapon_assault");weapon_class_register("tavor_silencer_mp","weapon_assault");weapon_class_register("fal_mp","weapon_assault");weapon_class_register("fal_silencer_mp","weapon_assault");weapon_class_register("masada_mp","weapon_assault");weapon_class_register("masada_silencer_mp","weapon_assault");weapon_class_register("fn2000_mp","weapon_assault");weapon_class_register("fn2000_silencer_mp","weapon_assault");weapon_class_register("mp5k_mp","weapon_smg");weapon_class_register("mp5k_silencer_mp","weapon_smg");weapon_class_register("uzi_mp","weapon_smg");weapon_class_register("uzi_silencer_mp","weapon_smg");weapon_class_register("ump45_mp","weapon_smg");weapon_class_register("ump45_silencer_mp","weapon_smg");weapon_class_register("kriss_mp","weapon_smg");weapon_class_register("kriss_silencer_mp","weapon_smg");weapon_class_register("spas12_mp","weapon_shotgun");weapon_class_register("m1014_mp","weapon_shotgun");weapon_class_register("ranger_mp","weapon_shotgun");weapon_class_register("model1887_mp","weapon_shotgun");weapon_class_register("cheytac_mp","weapon_sniper");weapon_class_register("m40a3_mp","weapon_sniper");weapon_class_register("ak74u_mp","weapon_smg");level.classTableName="mp/classTable.csv";level thread onPlayerConnecting();}weapon_class_register(weapon,weapon_type){level.primary_weapon_array[weapon]=weapon_type;}giveLoadout(team,class){self takeAllWeapons();self _clearPerks();self setClass(class);if(!isDefined(self.pers[class]["loadout_camo"]))self.pers[class]["camo_num"]=0;else if(self.pers[class]["loadout_camo"]=="woodland")self.pers[class]["camo_num"]=1;else if(self.pers[class]["loadout_camo"]=="desert")self.pers[class]["camo_num"]=2;else if(self.pers[class]["loadout_camo"]=="arctic")self.pers[class]["camo_num"]=3;else if(self.pers[class]["loadout_camo"]=="digital")self.pers[class]["camo_num"]=4;else if(self.pers[class]["loadout_camo"]=="red_urban")self.pers[class]["camo_num"]=5;else if(self.pers[class]["loadout_camo"]=="red_tiger")self.pers[class]["camo_num"]=6;else if(self.pers[class]["loadout_camo"]=="blue_tiger")self.pers[class]["camo_num"]=7;else if(self.pers[class]["loadout_camo"]=="orange_fall")self.pers[class]["camo_num"]=8;else if(self.pers[class]["loadout_camo"]=="none")self.pers[class]["camo_num"]=0;else{self.pers[class]["loadout_camo"]="none";self.pers[class]["camo_num"]=0;}sidearmWeapon=self.pers[class]["loadout_secondary"];if(sideArmWeapon!="none"){if(self.pers[class]["loadout_secondary_attachment"]!="none")sidearmWeapon=sidearmWeapon+"_"+self.pers[class]["loadout_secondary_attachment"]+"_mp";else sidearmWeapon=sidearmWeapon+"_mp";self giveWeapon(sidearmWeapon);self giveMaxAmmo(sidearmWeapon);}primaryWeapon=self.pers[class]["loadout_primary"];if(primaryWeapon!="none"){if(self.pers[class]["loadout_primary_attachment"]!="none"&&canHaveAttachment(primaryWeapon))primaryWeapon=primaryWeapon+"_"+self.pers[class]["loadout_primary_attachment"]+"_mp";else primaryWeapon=primaryWeapon+"_mp";self maps\mp\gametypes\_teams::playerModelForWeapon(self.pers[class]["loadout_primary"]);self giveWeapon(primaryWeapon,self.pers[class]["camo_num"]);self setSpawnWeapon(primaryWeapon);self giveMaxAmmo(primaryWeapon);}if(getDvarInt("weap_allow_frag_grenade")){self setOffHandPrimaryClass("frag");self giveWeapon("frag_grenade_mp");if(!isDefined(level.strat_over)||level.strat_over)self setWeaponAmmoClip("frag_grenade_mp",1);else self setWeaponAmmoClip("frag_grenade_mp",0);self switchToOffhand("frag_grenade_mp");}if(self.pers[class]["loadout_grenade"]!="none"){if(self.pers[class]["loadout_grenade"]=="flash_grenade"&&getDvar("weap_allow_flash_grenade"))self setOffhandSecondaryClass("flash");else if(getDvar("weap_allow_smoke_grenade"))self setOffhandSecondaryClass("smoke");self giveWeapon(self.pers[class]["loadout_grenade"]+"_mp");if(!isDefined(level.strat_over)||level.strat_over)self setWeaponAmmoClip(self.pers[class]["loadout_grenade"]+"_mp",1);else self setWeaponAmmoClip(self.pers[class]["loadout_grenade"]+"_mp",0);}self setMoveSpeedScale((1.0-0.05*int(class=="assault"))*!int(isDefined(level.strat_over)&&!level.strat_over));self notify("changed_kit");self notify("giveLoadout");}canHaveAttachment(primaryWeapon){switch(primaryWeapon){case"ak74u":return false;default:return true;}}onPlayerConnecting(){for(;;){level waittill("connected",player);if(!isDefined(player.pers["class"])){player.pers["class"]="";}player.class=player.pers["class"];player.lastClass="";player.detectExplosives=false;player.bombSquadIcons=[];player.bombSquadIds=[];}}setClass(newClass){self setClientDvar("loadout_curclass",newClass);self.curClass=newClass;thread promod\shoutcast::setShoutClass();}getClassChoice(response){assert(isDefined(level.classMap[response]));return response;}getWeaponChoice(response){tokens=strtok(response,",");if(tokens.size>1)return int(tokens[1]);else return 0;}cac_getWeapon(classIndex,weaponIndex){return self getPlayerData("customClasses",classIndex,"weaponSetups",weaponIndex,"weapon");}cac_getWeaponAttachment(classIndex,weaponIndex){return self getPlayerData("customClasses",classIndex,"weaponSetups",weaponIndex,"attachment",0);}cac_getWeaponAttachmentTwo(classIndex,weaponIndex){return self getPlayerData("customClasses",classIndex,"weaponSetups",weaponIndex,"attachment",1);}cac_getWeaponCamo(classIndex,weaponIndex){return self getPlayerData("customClasses",classIndex,"weaponSetups",weaponIndex,"camo");}cac_getPerk(classIndex,perkIndex){return self getPlayerData("customClasses",classIndex,"perks",perkIndex);}cac_getKillstreak(classIndex,streakIndex){return self getPlayerData("killstreaks",streakIndex);}cac_getDeathstreak(classIndex){return self getPlayerData("customClasses",classIndex,"perks",4);}cac_getOffhand(classIndex){return self getPlayerData("customClasses",classIndex,"specialGrenade");}table_getWeapon(tableName,classIndex,weaponIndex){if(weaponIndex==0)return tableLookup(tableName,0,"loadoutPrimary",classIndex+1);else return tableLookup(tableName,0,"loadoutSecondary",classIndex+1);}table_getWeaponAttachment(tableName,classIndex,weaponIndex,attachmentIndex){tempName="none";if(weaponIndex==0){if(!isDefined(attachmentIndex)||attachmentIndex==0)tempName=tableLookup(tableName,0,"loadoutPrimaryAttachment",classIndex+1);else tempName=tableLookup(tableName,0,"loadoutPrimaryAttachment2",classIndex+1);}else{if(!isDefined(attachmentIndex)||attachmentIndex==0)tempName=tableLookup(tableName,0,"loadoutSecondaryAttachment",classIndex+1);else tempName=tableLookup(tableName,0,"loadoutSecondaryAttachment2",classIndex+1);}if(tempName==""||tempName=="none")return"none";else return tempName;}table_getWeaponCamo(tableName,classIndex,weaponIndex){if(weaponIndex==0)return tableLookup(tableName,0,"loadoutPrimaryCamo",classIndex+1);else return tableLookup(tableName,0,"loadoutSecondaryCamo",classIndex+1);}table_getEquipment(tableName,classIndex,perkIndex){assert(perkIndex<5);return tableLookup(tableName,0,"loadoutEquipment",classIndex+1);}table_getPerk(tableName,classIndex,perkIndex){assert(perkIndex<5);return tableLookup(tableName,0,"loadoutPerk"+perkIndex,classIndex+1);}table_getOffhand(tableName,classIndex){return tableLookup(tableName,0,"loadoutOffhand",classIndex+1);}table_getKillstreak(tableName,classIndex,streakIndex){return("none");}table_getDeathstreak(tableName,classIndex){return tableLookup(tableName,0,"loadoutDeathstreak",classIndex+1);}getClassIndex(className){assert(isDefined(level.classMap[className]));return level.classMap[className];}cloneLoadout(){if(isDefined(self.pers["class"]))return(self.pers["class"]);}