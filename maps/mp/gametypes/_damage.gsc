#include maps\mp\_utility;
#include maps\mp\gametypes\_hud_util;
#include common_scripts\utility;
isSwitchingTeams(){if(isDefined(self.switching_teams))return true;return false;}isTeamSwitchBalanced(){playerCounts=self maps\mp\gametypes\_teams::CountPlayers();playerCounts[self.leaving_team]--;playerCounts[self.joining_team]++;return((playerCounts[self.joining_team]-playerCounts[self.leaving_team])<2);}isFriendlyFire(victim,attacker){if(!level.teamBased)return false;if(!isDefined(attacker))return false;if(!isPlayer(attacker)&&!isDefined(attacker.team))return false;if(victim.team!=attacker.team)return false;if(victim==attacker)return false;return true;}killedSelf(attacker){if(!isPlayer(attacker))return false;if(attacker!=self)return false;return true;}isHeadShot(sWeapon,sHitLoc,sMeansOfDeath,attacker){if(isDefined(attacker)){if(attacker.code_classname=="script_vehicle"&&isDefined(attacker.owner))return false;if(attacker.code_classname=="misc_turret"&&isDefined(attacker.owner))return false;if(attacker.code_classname=="script_model"&&isDefined(attacker.owner))return false;}return(sHitLoc=="head"||sHitLoc=="helmet")&&sMeansOfDeath!="MOD_MELEE"&&sMeansOfDeath!="MOD_IMPACT"&&!isMG(sWeapon);}handleTeamChangeDeath(){if(!level.teamBased)return;assert(self.leaving_team!=self.joining_team);if(self.joining_team=="spectator"||!isTeamSwitchBalanced()){self thread[[level.onXPEvent]]("suicide");self incPersStat("suicides",1);self.suicides=self getPersStat("suicides");}}handleWorldDeath(attacker,lifeId,sMeansOfDeath,sHitLoc){if(!isDefined(attacker))return;if(!isDefined(attacker.team)){handleSuicideDeath(sMeansOfDeath,sHitLoc);return;}assert(attacker.team=="axis"||attacker.team=="allies");if(level.teamBased&&attacker.team!=self.team){if(isDefined(level.onNormalDeath)&&isPlayer(attacker)&&attacker.team!="spectator")[[level.onNormalDeath]](self,attacker,lifeId);}}handleSuicideDeath(sMeansOfDeath,sHitLoc){self SetCardDisplaySlot(self,7);self openMenu("killedby_card_display");self thread[[level.onXPEvent]]("suicide");self incPersStat("suicides",1);self.suicides=self getPersStat("suicides");if(!matchMakingGame())self incPlayerStat("suicides",1);scoreSub=maps\mp\gametypes\_tweakables::getTweakableValue("game","suicidepointloss");maps\mp\gametypes\_gamescore::_setPlayerScore(self,maps\mp\gametypes\_gamescore::_getPlayerScore(self)-scoreSub);if(sMeansOfDeath=="MOD_SUICIDE"&&sHitLoc=="none"&&isDefined(self.throwingGrenade))self.lastGrenadeSuicideTime=gettime();if(isDefined(self.friendlydamage))self iPrintLnBold(&"MP_FRIENDLY_FIRE_WILL_NOT");}handleFriendlyFireDeath(attacker){attacker SetCardDisplaySlot(self,8);attacker openMenu("youkilled_card_display");self SetCardDisplaySlot(attacker,7);self openMenu("killedby_card_display");attacker thread[[level.onXPEvent]]("teamkill");attacker.pers["teamkills"]+=1.0;attacker.teamkillsThisRound++;if(maps\mp\gametypes\_tweakables::getTweakableValue("team","teamkillpointloss")){scoreSub=maps\mp\gametypes\_rank::getScoreInfoValue("kill");maps\mp\gametypes\_gamescore::_setPlayerScore(attacker,maps\mp\gametypes\_gamescore::_getPlayerScore(attacker)-scoreSub);}if(level.maxAllowedTeamkills<0)return;if(level.inGracePeriod){teamKillDelay=1;attacker.pers["teamkills"]+=level.maxAllowedTeamkills;}else if(attacker.pers["teamkills"]>1&&getTimePassed()<((level.gracePeriod*1000)+8000+(attacker.pers["teamkills"]*1000))){teamKillDelay=1;attacker.pers["teamkills"]+=level.maxAllowedTeamkills;}else{teamKillDelay=attacker maps\mp\gametypes\_playerlogic::TeamKillDelay();}if(teamKillDelay>0){attacker.pers["teamKillPunish"]=true;attacker _suicide();}}handleNormalDeath(lifeId,attacker,eInflictor,sWeapon,sMeansOfDeath){attacker SetCardDisplaySlot(self,8);attacker openMenu("youkilled_card_display");self SetCardDisplaySlot(attacker,7);self openMenu("killedby_card_display");if(sMeansOfDeath=="MOD_HEAD_SHOT"){attacker incPersStat("headshots",1);attacker.headshots=attacker getPersStat("headshots");attacker incPlayerStat("headshots",1);value=undefined;attacker playLocalSound("bullet_impact_headshot_2");}else{value=undefined;}attacker thread maps\mp\gametypes\_rank::giveRankXP("kill",value);attacker incPersStat("kills",1);attacker.kills=attacker getPersStat("kills");attacker incPlayerStat("kills",1);self.pers["copyCatLoadout"]=undefined;maps\mp\gametypes\_gamescore::givePlayerScore("kill",attacker,self);scoreSub=maps\mp\gametypes\_tweakables::getTweakableValue("game","deathpointloss");maps\mp\gametypes\_gamescore::_setPlayerScore(self,maps\mp\gametypes\_gamescore::_getPlayerScore(self)-scoreSub);attacker notify("killed_enemy");if(!level.teamBased){self.attackers=[];return;}if(isDefined(level.onNormalDeath)&&attacker.pers["team"]!="spectator")[[level.onNormalDeath]](self,attacker,lifeId);if(isDefined(self.attackers)){foreach(player in self.attackers){if(!isDefined(player))continue;if(player==attacker)continue;player thread maps\mp\gametypes\_gamescore::processAssist(self);}self.attackers=[];}}isPlayerWeapon(weaponName){if(weaponClass(weaponName)=="non-player")return false;if(weaponClass(weaponName)=="turret")return false;if(weaponInventoryType(weaponName)=="primary"||weaponInventoryType(weaponName)=="altmode")return true;return false;}Callback_PlayerKilled(eInflictor,attacker,iDamage,sMeansOfDeath,sWeapon,vDir,sHitLoc,psOffsetTime,deathAnimDuration){PlayerKilled_internal(eInflictor,attacker,self,iDamage,sMeansOfDeath,sWeapon,vDir,sHitLoc,psOffsetTime,deathAnimDuration,false);}PlayerKilled_internal(eInflictor,attacker,victim,iDamage,sMeansOfDeath,sWeapon,vDir,sHitLoc,psOffsetTime,deathAnimDuration,isFauxDeath){prof_begin("PlayerKilled");victim endon("spawned");victim notify("killed_player");assert(victim.sessionteam!="spectator");if(isDefined(attacker))attacker.assistedSuicide=undefined;if(!isDefined(victim.idFlags)){if(sMeansOfDeath=="MOD_SUICIDE")victim.idFlags=0;else if(sMeansOfDeath=="MOD_GRENADE"&&isSubstr(sWeapon,"frag_grenade")&&iDamage==100000)victim.idFlags=0;else if(level.friendlyfire>=2)victim.idFlags=0;else assertEx(0,"Victims ID flags not set, but means of death was gr or nuke: "+sMeansOfDeath);}if(!isFauxDeath){if(isDefined(victim.endGame)){victim VisionSetNakedForPlayer(getDvar("mapname"),2);}else if(!isDefined(victim.nuked)){victim VisionSetNakedForPlayer(getDvar("mapname"),0);victim ThermalVisionOff();}}else{victim.fauxDead=true;self notify("death");}if(game["state"]=="postgame"){prof_end("PlayerKilled");return;}deathTimeOffset=0;if(!isPlayer(eInflictor)&&isDefined(eInflictor.primaryWeapon))sPrimaryWeapon=eInflictor.primaryWeapon;else if(isDefined(attacker)&&isPlayer(attacker)&&attacker getCurrentPrimaryWeapon()!="none")sPrimaryWeapon=attacker getCurrentPrimaryWeapon();else sPrimaryWeapon=undefined;if((!isDefined(attacker)||attacker.classname=="trigger_hurt"||attacker.classname=="worldspawn"||attacker==victim)&&isDefined(self.attackers)){bestPlayer=undefined;foreach(player in self.attackers){if(!isDefined(player))continue;if(!isDefined(victim.attackerData[player.guid].damage))continue;if(player==victim||(level.teamBased&&player.team==victim.team))continue;if(victim.attackerData[player.guid].lasttimedamaged+2500<getTime())continue;if(victim.attackerData[player.guid].damage>1&&!isDefined(bestPlayer))bestPlayer=player;else if(isDefined(bestPlayer)&&victim.attackerData[player.guid].damage>victim.attackerData[bestPlayer.guid].damage)bestPlayer=player;}if(isDefined(bestPlayer)){attacker=bestPlayer;attacker.assistedSuicide=true;sWeapon=victim.attackerData[bestPlayer.guid].weapon;vDir=victim.attackerData[bestPlayer.guid].vDir;sHitLoc=victim.attackerData[bestPlayer.guid].sHitLoc;psOffsetTime=victim.attackerData[bestPlayer.guid].psOffsetTime;sMeansOfDeath=victim.attackerData[bestPlayer.guid].sMeansOfDeath;iDamage=victim.attackerData[bestPlayer.guid].damage;sPrimaryWeapon=victim.attackerData[bestPlayer.guid].sPrimaryWeapon;eInflictor=attacker;}}else{if(isDefined(attacker))attacker.assistedSuicide=undefined;}if(isHeadShot(sWeapon,sHitLoc,sMeansOfDeath,attacker))sMeansOfDeath="MOD_HEAD_SHOT";else if(sMeansOfDeath!="MOD_MELEE"&&!isDefined(victim.nuked))victim playDeathSound();friendlyFire=isFriendlyFire(victim,attacker);if(isDefined(attacker)){if(attacker.code_classname=="script_vehicle"&&isDefined(attacker.owner))attacker=attacker.owner;if(attacker.code_classname=="misc_turret"&&isDefined(attacker.owner))attacker=attacker.owner;if(attacker.code_classname=="script_model"&&isDefined(attacker.owner)){attacker=attacker.owner;if(!isFriendlyFire(victim,attacker)&&attacker!=victim)attacker notify("crushed_enemy");}}victim maps\mp\gametypes\_weapons::dropWeaponForDeath(attacker);if(!isFauxDeath){victim.sessionstate="dead";victim.statusicon="hud_status_dead";}victim maps\mp\gametypes\_playerlogic::removeFromAliveCount();if(!isDefined(victim.switching_teams)){victim incPersStat("deaths",1);victim.deaths=victim getPersStat("deaths");victim incPlayerStat("deaths",1);}obituary(victim,attacker,sWeapon,sMeansOfDeath);doKillcam=false;lifeId=getNextLifeId();victim logPrintPlayerDeath(lifeId,attacker,iDamage,sMeansOfDeath,sWeapon,sPrimaryWeapon,sHitLoc);victim maps\mp\_matchdata::logPlayerLife(lifeId);victim maps\mp\_matchdata::logPlayerDeath(lifeId,attacker,iDamage,sMeansOfDeath,sWeapon,sPrimaryWeapon,sHitLoc);if((sMeansOfDeath=="MOD_MELEE")){attacker incPlayerStat("knifekills",1);}if(victim isSwitchingTeams()){handleTeamChangeDeath();}else if(!isPlayer(attacker)||(isPlayer(attacker)&&sMeansOfDeath=="MOD_FALLING")){handleWorldDeath(attacker,lifeId,sMeansOfDeath,sHitLoc);}else if(attacker==victim){handleSuicideDeath(sMeansOfDeath,sHitLoc);}else if(friendlyFire){if(!isDefined(victim.nuked)){handleFriendlyFireDeath(attacker);}}else{if(sMeansOfDeath=="MOD_GRENADE"&&eInflictor==attacker)addAttacker(victim,attacker,eInflictor,sWeapon,iDamage,(0,0,0),vDir,sHitLoc,psOffsetTime,sMeansOfDeath);doKillcam=true;handleNormalDeath(lifeId,attacker,eInflictor,sWeapon,sMeansOfDeath);}victim resetPlayerVariables();victim.lastAttacker=attacker;victim.lastDeathPos=victim.origin;victim.deathTime=getTime();victim.wantSafeSpawn=false;victim.revived=false;victim.sameShotDamage=0;if(isFauxDeath){doKillcam=false;deathAnimDuration=(victim PlayerForceDeathAnim(eInflictor,sMeansOfDeath,sWeapon,sHitLoc,vDir));}victim.body=victim clonePlayer(deathAnimDuration);if(isFauxDeath)victim PlayerHide();if(victim isOnLadder()||victim isMantling()||!victim isOnGround()||isDefined(victim.nuked))victim.body startRagDoll();thread delayStartRagdoll(victim.body,sHitLoc,vDir,sWeapon,eInflictor,sMeansOfDeath);victim thread[[level.onPlayerKilled]](eInflictor,attacker,iDamage,sMeansOfDeath,sWeapon,vDir,sHitLoc,psOffsetTime,deathAnimDuration,lifeId);if(!isDefined(self.switching_teams))self notify("updateshoutcast");if(isPlayer(attacker))attackerNum=attacker getEntityNumber();else attackerNum=-1;killcamentity=victim getKillcamEntity(attacker,eInflictor,sWeapon);killcamentityindex=-1;killcamentitystarttime=0;if(isDefined(killcamentity)){killcamentityindex=killcamentity getEntityNumber();killcamentitystarttime=killcamentity.birthtime;if(!isdefined(killcamentitystarttime))killcamentitystarttime=0;}if((isDefined(attacker.finalKill)&&doKillcam&&!isDefined(level.nukeDetonated))&&((getDvarInt("promod_allow_winningkc")&&(!isDefined(game["PROMOD_MATCH_MODE"])||game["PROMOD_MATCH_MODE"]!="match"))||(getDvarInt("promod_allow_winningkc_match")&&isDefined(game["PROMOD_MATCH_MODE"])&&game["PROMOD_MATCH_MODE"]=="match"))){level thread doFinalKillcam(5.0,victim,attacker,attackerNum,killcamentityindex,killcamentitystarttime,sWeapon,deathTimeOffset,psOffsetTime);if(!isFauxDeath)wait(1.0);}if(!isFauxDeath){wait(0.25);victim thread maps\mp\gametypes\_killcam::cancelKillCamOnUse();wait(0.25);self.respawnTimerStartTime=gettime()+1000;timeUntilSpawn=maps\mp\gametypes\_playerlogic::TimeUntilSpawn(true);if(timeUntilSpawn<1)timeUntilSpawn=1;victim thread maps\mp\gametypes\_playerlogic::predictAboutToSpawnPlayerOverTime(timeUntilSpawn);wait(1.0);victim notify("death_delay_finished");}postDeathDelay=(getTime()-victim.deathTime)/1000;self.respawnTimerStartTime=gettime();if(!(isDefined(victim.cancelKillcam)&&victim.cancelKillcam)&&doKillcam&&level.killcam&&game["state"]=="playing"&&!victim isUsingRemote()&&!level.showingFinalKillcam){livesLeft=!(getGametypeNumLives()&&!victim.pers["lives"]);timeUntilSpawn=maps\mp\gametypes\_playerlogic::TimeUntilSpawn(true);willRespawnImmediately=livesLeft&&(timeUntilSpawn<=0);if(!livesLeft)timeUntilSpawn=-1;victim maps\mp\gametypes\_killcam::killcam(attackerNum,killcamentityindex,killcamentitystarttime,sWeapon,postDeathDelay+deathTimeOffset,psOffsetTime,timeUntilSpawn,maps\mp\gametypes\_gamelogic::timeUntilRoundEnd(),attacker,victim);}if(game["state"]!="playing"){if(!level.showingFinalKillcam){victim.sessionstate="dead";victim ClearKillcamState();}prof_end("PlayerKilled");return;}if(isValidClass(victim.class)){victim thread maps\mp\gametypes\_playerlogic::spawnClient();}prof_end("PlayerKilled");}doFinalKillcam(delay,victim,attacker,attackerNum,killcamentityindex,killcamentitystarttime,sWeapon,deathTimeOffset,psOffsetTime){level.showingFinalKillcam=true;level waittill("round_end_finished");if(!isDefined(victim)||!isDefined(attacker)){level.showingFinalKillcam=false;return;}postDeathDelay=((getTime()-victim.deathTime)/1000);foreach(player in level.players){player closePopupMenu();player closeInGameMenu();player VisionSetNakedForPlayer(getDvar("mapname"),0);player.killcamentitylookat=victim getEntityNumber();player thread maps\mp\gametypes\_killcam::killcam(attackerNum,killcamentityindex,killcamentitystarttime,sWeapon,postDeathDelay+deathTimeOffset,psOffsetTime,0,10000,attacker,victim);}wait(0.1);while(anyPlayersInKillcam())wait(0.05);level.showingFinalKillcam=false;}anyPlayersInKillcam(){foreach(player in level.players){if(isDefined(player.killcam))return true;}return false;}resetPlayerVariables(){self.killedPlayersCurrent=[];self.switching_teams=undefined;self.joining_team=undefined;self.leaving_team=undefined;self.pers["cur_kill_streak"]=0;self maps\mp\gametypes\_gameobjects::detachUseModels();}getKillcamEntity(attacker,eInflictor,sWeapon){if(!isDefined(eInflictor))return undefined;if(eInflictor==attacker)return undefined;if(isDefined(eInflictor.script_gameobjectname)&&eInflictor.script_gameobjectname=="bombzone")return eInflictor.killCamEnt;if(eInflictor.classname=="script_origin"||eInflictor.classname=="script_model"||eInflictor.classname=="script_brushmodel")return undefined;return eInflictor;}Callback_PlayerDamage_internal(eInflictor,eAttacker,victim,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime){if(!isDefined(level.rdyup))level.rdyup=false;if((isDefined(game["PROMOD_MATCH_MODE"])&&game["PROMOD_MATCH_MODE"]=="strat"&&isDefined(self.flying)&&self.flying)||(isDefined(level.strat_over)&&!level.strat_over)||(isDefined(level.inReadyUpTimer)&&level.inReadyUpTimer)||!isReallyAlive(victim)||(isDefined(eAttacker)&&eAttacker.classname=="script_origin"&&isDefined(eAttacker.type)&&eAttacker.type=="soft_landing")||(isDefined(level.bombDefused)&&level.bombDefused||isDefined(level.bombExploded)&&level.bombExploded&&self.pers["team"]==game["attackers"]))return;if(sMeansOfDeath=="MOD_FALLING")victim thread emitFallDamage(iDamage);if(isDefined(eAttacker)&&eAttacker.classname=="worldspawn")eAttacker=undefined;if(isDefined(eAttacker)&&isDefined(eAttacker.gunner))eAttacker=eAttacker.gunner;attackerIsNPC=isDefined(eAttacker)&&!isDefined(eAttacker.gunner)&&(eAttacker.classname=="script_vehicle"||eAttacker.classname=="misc_turret"||eAttacker.classname=="script_model");attackerIsHittingTeammate=level.teamBased&&isDefined(eAttacker)&&(victim!=eAttacker)&&isDefined(eAttacker.team)&&(victim.pers["team"]==eAttacker.team);stunFraction=0.0;if(iDFlags&level.iDFLAGS_STUN){stunFraction=0.0;iDamage=0.0;}if(isDefined(eAttacker)&&isPlayer(eAttacker)&&isPlayer(victim)&&eAttacker.sessionstate=="playing"&&isDefined(iDamage)&&isDefined(sMeansOfDeath)&&sMeansOfDeath!=""&&(sMeansOfDeath=="MOD_RIFLE_BULLET"||sMeansOfDeath=="MOD_PISTOL_BULLET"))iDamage=int(iDamage*1.4);if(!iDamage)return false;victim.iDFlags=iDFlags;victim.iDFlagsTime=getTime();if(game["state"]=="postgame")return;if(victim.sessionteam=="spectator")return;if(isDefined(victim.canDoCombat)&&!victim.canDoCombat)return;if(isDefined(eAttacker)&&isPlayer(eAttacker)&&isDefined(eAttacker.canDoCombat)&&!eAttacker.canDoCombat)return;if(attackerIsNPC&&attackerIsHittingTeammate){if(sMeansOfDeath=="MOD_CRUSH"){victim _suicide();return;}if(!level.friendlyfire)return;}prof_begin("PlayerDamage flags/tweaks");if(!isDefined(vDir))iDFlags|=level.iDFLAGS_NO_KNOCKBACK;friendly=false;if((victim.health==victim.maxhealth&&(!isDefined(victim.lastStand)||!victim.lastStand))||!isDefined(victim.attackers)&&!isDefined(victim.lastStand)){victim.attackers=[];victim.attackerData=[];}if(isHeadShot(sWeapon,sHitLoc,sMeansOfDeath,eAttacker))sMeansOfDeath="MOD_HEAD_SHOT";if(maps\mp\gametypes\_tweakables::getTweakableValue("game","onlyheadshots")){if(sMeansOfDeath=="MOD_PISTOL_BULLET"||sMeansOfDeath=="MOD_RIFLE_BULLET"||sMeansOfDeath=="MOD_EXPLOSIVE_BULLET")return;else if(sMeansOfDeath=="MOD_HEAD_SHOT")iDamage=150;}if(sWeapon=="none"&&isDefined(eInflictor)){if(isDefined(eInflictor.destructible_type)&&isSubStr(eInflictor.destructible_type,"vehicle_"))sWeapon="destructible_car";}prof_end("PlayerDamage flags/tweaks");if(!(iDFlags&level.iDFLAGS_NO_PROTECTION)){if(!level.teamBased&&attackerIsNPC&&isDefined(eAttacker.owner)&&eAttacker.owner==victim){prof_end("PlayerDamage player");if(sMeansOfDeath=="MOD_CRUSH")victim _suicide();return;}if((isSubStr(sMeansOfDeath,"MOD_GRENADE")||isSubStr(sMeansOfDeath,"MOD_EXPLOSIVE")||isSubStr(sMeansOfDeath,"MOD_PROJECTILE"))&&isDefined(eInflictor)&&isDefined(eAttacker)){if(eInflictor.classname=="grenade"&&(victim.lastSpawnTime+3500)>getTime()&&isDefined(victim.lastSpawnPoint)&&distance(eInflictor.origin,victim.lastSpawnPoint.origin)<250){prof_end("PlayerDamage player");return;}victim.explosiveInfo=[];victim.explosiveInfo["damageTime"]=getTime();victim.explosiveInfo["damageId"]=eInflictor getEntityNumber();victim.explosiveInfo["returnToSender"]=false;victim.explosiveInfo["counterKill"]=false;victim.explosiveInfo["chainKill"]=false;victim.explosiveInfo["cookedKill"]=false;victim.explosiveInfo["throwbackKill"]=false;victim.explosiveInfo["suicideGrenadeKill"]=false;victim.explosiveInfo["weapon"]=sWeapon;isFrag=isSubStr(sWeapon,"frag_");if(eAttacker!=victim){if(isDefined(eAttacker.lastGrenadeSuicideTime)&&eAttacker.lastGrenadeSuicideTime>=gettime()-50&&isFrag)victim.explosiveInfo["suicideGrenadeKill"]=true;}if(isFrag){victim.explosiveInfo["cookedKill"]=isDefined(eInflictor.isCooked);victim.explosiveInfo["throwbackKill"]=isDefined(eInflictor.threwBack);}victim.explosiveInfo["stickKill"]=isDefined(eInflictor.isStuck)&&eInflictor.isStuck=="enemy";victim.explosiveInfo["stickFriendlyKill"]=isDefined(eInflictor.isStuck)&&eInflictor.isStuck=="friendly";}if(isPlayer(eAttacker))eAttacker.pers["participation"]++;prevHealthRatio=victim.health/victim.maxhealth;if(attackerIsHittingTeammate){if(!matchMakingGame()&&isPlayer(eAttacker))eAttacker incPlayerStat("mostff",1);prof_begin("PlayerDamage player");if(level.friendlyfire==0||(!isPlayer(eAttacker)&&level.friendlyfire!=1)){return;}else if(level.friendlyfire==1){if(iDamage<1)iDamage=1;victim.lastDamageWasFromEnemy=false;victim finishPlayerDamageWrapper(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime,stunFraction);}else if((level.friendlyfire==2)&&isReallyAlive(eAttacker)){iDamage=int(iDamage*.5);if(iDamage<1)iDamage=1;eAttacker.lastDamageWasFromEnemy=false;eAttacker.friendlydamage=true;eAttacker finishPlayerDamageWrapper(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime,stunFraction);eAttacker.friendlydamage=undefined;}else if(level.friendlyfire==3&&isReallyAlive(eAttacker)){iDamage=int(iDamage*.5);if(iDamage<1)iDamage=1;victim.lastDamageWasFromEnemy=false;eAttacker.lastDamageWasFromEnemy=false;victim finishPlayerDamageWrapper(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime,stunFraction);if(isReallyAlive(eAttacker)){eAttacker.friendlydamage=true;eAttacker finishPlayerDamageWrapper(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime,stunFraction);eAttacker.friendlydamage=undefined;}}friendly=true;}else{prof_begin("PlayerDamage world");if(iDamage<1)iDamage=1;if(isDefined(eAttacker)&&isPlayer(eAttacker))addAttacker(victim,eAttacker,eInflictor,sWeapon,iDamage,vPoint,vDir,sHitLoc,psOffsetTime,sMeansOfDeath);if(isdefined(eAttacker))level.lastLegitimateAttacker=eAttacker;if(isdefined(eAttacker)&&isPlayer(eAttacker)&&isDefined(sWeapon)&&eAttacker!=victim){victim.attackerPosition=eAttacker.origin;}else{victim.attackerPosition=undefined;}if(issubstr(sMeansOfDeath,"MOD_GRENADE")&&isDefined(eInflictor.isCooked))victim.wasCooked=getTime();else victim.wasCooked=undefined;victim.lastDamageWasFromEnemy=(isDefined(eAttacker)&&(eAttacker!=victim));if(victim.lastDamageWasFromEnemy)eAttacker.damagedPlayers[victim.guid]=getTime();victim finishPlayerDamageWrapper(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime,stunFraction);prof_end("PlayerDamage world");}if(attackerIsNPC&&isDefined(eAttacker.gunner))damager=eAttacker.gunner;else damager=eAttacker;if(isDefined(damager)&&damager!=victim&&iDamage>0){if(sMeansOfDeath=="MOD_HEAD_SHOT")thread dinkNoise(damager,victim);typeHit="standard";if(!(iDFlags&level.iDFLAGS_PENETRATION))damager thread maps\mp\gametypes\_damagefeedback::updateDamageFeedback(typeHit);}victim.hasDoneCombat=true;}if(isdefined(eAttacker)&&(eAttacker!=victim)&&!friendly)level.useStartSpawns=false;prof_begin("PlayerDamage log");if(victim.sessionstate!="dead"){lpselfnum=victim getEntityNumber();lpselfname=victim.name;lpselfteam=victim.pers["team"];lpselfGuid=victim.guid;lpattackerteam="";if(isPlayer(eAttacker)){lpattacknum=eAttacker getEntityNumber();lpattackGuid=eAttacker.guid;lpattackname=eAttacker.name;lpattackerteam=eAttacker.pers["team"];}else{lpattacknum=-1;lpattackGuid="";lpattackname="";lpattackerteam="world";}logPrint("D;"+lpselfGuid+";"+lpselfnum+";"+lpselfteam+";"+lpselfname+";"+lpattackGuid+";"+lpattacknum+";"+lpattackerteam+";"+lpattackname+";"+sWeapon+";"+iDamage+";"+sMeansOfDeath+";"+sHitLoc+"\n");}if((isDefined(level.ready_up_over)&&!level.ready_up_over)||(isDefined(level.timeout_over)&&!level.timeout_over)||(isDefined(game["PROMOD_MATCH_MODE"])&&game["PROMOD_MATCH_MODE"]=="strat")){damagestring="";unitstring="";if(isDefined(sHitLoc)&&sHitLoc!="none"){if(isSubStr(sHitLoc,"torso_upper"))damagestring=("upper torso");else if(isSubStr(sHitLoc,"torso_lower"))damagestring=("lower torso");else if(isSubStr(sHitLoc,"leg_upper"))damagestring=("upper leg");else if(isSubStr(sHitLoc,"leg_lower"))damagestring=("lower leg");else if(isSubStr(sHitLoc,"arm_upper"))damagestring=("upper arm");else if(isSubStr(sHitLoc,"arm_lower"))damagestring=("lower arm");else if(isSubStr(sHitLoc,"head")||isSubStr(sHitLoc,"helmet"))damagestring=("head");else if(isSubStr(sHitLoc,"neck"))damagestring=("neck");else if(isSubStr(sHitLoc,"foot"))damagestring=("foot");else if(isSubStr(sHitLoc,"hand"))damagestring=("hand");unitstring=distance(self.origin,eAttacker.origin);}if(isDefined(eAttacker)){if(isPlayer(eAttacker)){if(eAttacker.name!=self.name){if(isDefined(sHitLoc)&&sHitLoc!="none"){eAttacker iprintln("You did "+"^2"+iDamage+"^7 damage at a distance of "+"^2"+unitstring+"^7 units in the "+"^2"+damagestring+"^7 to "+self.name);self iprintln(eAttacker.name+" did "+"^1"+iDamage+"^7 damage at a distance of "+"^1"+unitstring+"^7 units in the "+"^1"+damagestring+"^7 to you");}else if(isDefined(sHitLoc)&&sHitLoc=="none"){eAttacker iprintln("You did "+"^2"+iDamage+"^7 damage to "+self.name);self iprintln(eAttacker.name+" did "+"^1"+iDamage+"^7 damage to you");}}else if(eAttacker.name==self.name){if(isDefined(sHitLoc)&&sHitLoc=="none"){self iprintln("You did ^1"+iDamage+"^7 damage to yourself");}}}}if(sMeansOfDeath=="MOD_FALLING")self iprintln("You did ^1"+iDamage+"^7 damage to yourself");}prof_end("PlayerDamage log");if(!isDefined(self.switching_teams))self notify("updateshoutcast");}dinkNoise(player1,player2){player1 playLocalSound("bullet_impact_headshot_2");player2 playLocalSound("bullet_impact_headshot_2");}addAttacker(victim,eAttacker,eInflictor,sWeapon,iDamage,vPoint,vDir,sHitLoc,psOffsetTime,sMeansOfDeath){if(!isDefined(victim.attackerData))victim.attackerData=[];if(!isDefined(victim.attackerData[eAttacker.guid])){victim.attackers[eAttacker.guid]=eAttacker;victim.attackerData[eAttacker.guid]=SpawnStruct();victim.attackerData[eAttacker.guid].damage=0;victim.attackerData[eAttacker.guid].attackerEnt=eAttacker;victim.attackerData[eAttacker.guid].firstTimeDamaged=getTime();}if(maps\mp\gametypes\_weapons::isPrimaryWeapon(sWeapon))victim.attackerData[eAttacker.guid].isPrimary=true;victim.attackerData[eAttacker.guid].damage+=iDamage;victim.attackerData[eAttacker.guid].weapon=sWeapon;victim.attackerData[eAttacker.guid].vPoint=vPoint;victim.attackerData[eAttacker.guid].vDir=vDir;victim.attackerData[eAttacker.guid].sHitLoc=sHitLoc;victim.attackerData[eAttacker.guid].psOffsetTime=psOffsetTime;victim.attackerData[eAttacker.guid].sMeansOfDeath=sMeansOfDeath;victim.attackerData[eAttacker.guid].attackerEnt=eAttacker;victim.attackerData[eAttacker.guid].lasttimeDamaged=getTime();if(isDefined(eInflictor)&&!isPlayer(eInflictor)&&isDefined(eInflictor.primaryWeapon))victim.attackerData[eAttacker.guid].sPrimaryWeapon=eInflictor.primaryWeapon;else if(isDefined(eAttacker)&&isPlayer(eAttacker)&&eAttacker getCurrentPrimaryWeapon()!="none")victim.attackerData[eAttacker.guid].sPrimaryWeapon=eAttacker getCurrentPrimaryWeapon();else victim.attackerData[eAttacker.guid].sPrimaryWeapon=undefined;}resetAttackerList(){self endon("disconnect");self endon("death");level endon("game_ended");wait(1.75);self.attackers=[];self.attackerData=[];}Callback_PlayerDamage(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime){Callback_PlayerDamage_internal(eInflictor,eAttacker,self,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime);}finishPlayerDamageWrapper(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime,stunFraction){self finishPlayerDamage(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime,stunFraction);self damageShellshockAndRumble(eInflictor,sWeapon,sMeansOfDeath,iDamage);}Callback_PlayerLastStand(){}getHitLocHeight(sHitLoc){switch(sHitLoc){case"helmet":case"head":case"neck":return 60;case"torso_upper":case"right_arm_upper":case"left_arm_upper":case"right_arm_lower":case"left_arm_lower":case"right_hand":case"left_hand":case"gun":return 48;case"torso_lower":return 40;case"right_leg_upper":case"left_leg_upper":return 32;case"right_leg_lower":case"left_leg_lower":return 10;case"right_foot":case"left_foot":return 5;}return 48;}delayStartRagdoll(ent,sHitLoc,vDir,sWeapon,eInflictor,sMeansOfDeath){if(isDefined(ent)){deathAnim=ent getCorpseAnim();if(animhasnotetrack(deathAnim,"ignore_ragdoll"))return;}wait(0.2);if(!isDefined(ent))return;if(ent isRagDoll())return;deathAnim=ent getcorpseanim();startFrac=0.35;if(animhasnotetrack(deathAnim,"start_ragdoll")){times=getnotetracktimes(deathAnim,"start_ragdoll");if(isDefined(times))startFrac=times[0];}waitTime=startFrac*getanimlength(deathAnim);wait(waitTime);if(isDefined(ent)){ent startragdoll(1);}}getMostKilledBy(){mostKilledBy="";killCount=0;killedByNames=getArrayKeys(self.killedBy);for(index=0;index<killedByNames.size;index++){killedByName=killedByNames[index];if(self.killedBy[killedByName]<=killCount)continue;killCount=self.killedBy[killedByName];mostKilleBy=killedByName;}return mostKilledBy;}getMostKilled(){mostKilled="";killCount=0;killedNames=getArrayKeys(self.killedPlayers);for(index=0;index<killedNames.size;index++){killedName=killedNames[index];if(self.killedPlayers[killedName]<=killCount)continue;killCount=self.killedPlayers[killedName];mostKilled=killedName;}return mostKilled;}damageShellshockAndRumble(eInflictor,sWeapon,sMeansOfDeath,iDamage){self thread maps\mp\gametypes\_weapons::onWeaponDamage(eInflictor,sWeapon,sMeansOfDeath,iDamage);self PlayRumbleOnEntity("damage_heavy");}Callback_KillingBlow(eInflictor,eAttacker,iDamage,iDFlags,sMeansOfDeath,sWeapon,vPoint,vDir,sHitLoc,psOffsetTime){return true;}emitFallDamage(iDamage){PhysicsExplosionSphere(self.origin,64,64,1);damageEnts=[];for(testAngle=0;testAngle<360;testAngle+=30){xOffset=cos(testAngle)*16;yOffset=sin(testAngle)*16;traceData=bulletTrace(self.origin+(xOffset,yOffset,4),self.origin+(xOffset,yOffset,-6),true,self);if(isDefined(traceData["entity"])&&isDefined(traceData["entity"].targetname)&&traceData["entity"].targetname=="destructible_toy")damageEnts[damageEnts.size]=traceData["entity"];}if(damageEnts.size){damageOwner=spawn("script_origin",self.origin);damageOwner hide();damageOwner.type="soft_landing";damageOwner.destructibles=damageEnts;radiusDamage(self.origin,64,100,100,damageOwner);wait(0.1);damageOwner delete();}}drawLine(start,end,timeSlice){drawTime=int(timeSlice*20);for(time=0;time<drawTime;time++){line(start,end,(1,0,0),false,1);wait(0.05);}}_obituary(victim,attacker,sWeapon,sMeansOfDeath){victimTeam=victim.team;foreach(player in level.players){playerTeam=player.team;if(playerTeam=="spectator")player iPrintLn(&"MP_OBITUARY_NEUTRAL",attacker.name,victim.name);else if(playerTeam==victimTeam)player iPrintLn(&"MP_OBITUARY_ENEMY",attacker.name,victim.name);else player iPrintLn(&"MP_OBITUARY_FRIENDLY",attacker.name,victim.name);}}logPrintPlayerDeath(lifeId,attacker,iDamage,sMeansOfDeath,sWeapon,sPrimaryWeapon,sHitLoc){lpselfnum=self getEntityNumber();lpselfname=self.name;lpselfteam=self.team;lpselfguid=self.guid;if(isPlayer(attacker)){lpattackGuid=attacker.guid;lpattackname=attacker.name;lpattackerteam=attacker.team;lpattacknum=attacker getEntityNumber();attackerString=attacker getXuid()+"("+lpattackname+")";}else{lpattackGuid="";lpattackname="";lpattackerteam="world";lpattacknum=-1;attackerString="none";}logPrint("K;"+lpselfguid+";"+lpselfnum+";"+lpselfteam+";"+lpselfname+";"+lpattackguid+";"+lpattacknum+";"+lpattackerteam+";"+lpattackname+";"+sWeapon+";"+iDamage+";"+sMeansOfDeath+";"+sHitLoc+"\n");}