#include maps\mp\_utility;
init(){level.persistentDataInfo=[];maps\mp\gametypes\_class::init();maps\mp\gametypes\_rank::init();maps\mp\gametypes\_playercards::init();promod\_promod_util::init();promod\_menu::init();}statGet(dataName){assert(!isDefined(self.bufferedStats[dataName]));return self GetPlayerData(dataName);}statSet(dataName,value){assert(!isDefined(self.bufferedStats[dataName]));if(!self rankingEnabled())return;self SetPlayerData(dataName,value);}statAdd(dataName,value){assert(!isDefined(self.bufferedStats[dataName]));if(!self rankingEnabled())return;curValue=self GetPlayerData(dataName);self SetPlayerData(dataName,value+curValue);}statGetChild(parent,child){return self GetPlayerData(parent,child);}statSetChild(parent,child,value){if(!self rankingEnabled())return;self SetPlayerData(parent,child,value);}statAddChild(parent,child,value){assert(isDefined(self.bufferedChildStats[parent][child]));if(!self rankingEnabled())return;curValue=self GetPlayerData(parent,child);self SetPlayerData(parent,child,curValue+value);}statGetChildBuffered(parent,child){assert(isDefined(self.bufferedChildStats[parent][child]));return self.bufferedChildStats[parent][child];}statSetChildBuffered(parent,child,value){assert(isDefined(self.bufferedChildStats[parent][child]));if(!self rankingEnabled())return;self.bufferedChildStats[parent][child]=value;}statAddChildBuffered(parent,child,value){assert(isDefined(self.bufferedChildStats[parent][child]));if(!self rankingEnabled())return;curValue=statGetChildBuffered(parent,child);statSetChildBuffered(parent,child,curValue+value);}statGetBuffered(dataName){assert(isDefined(self.bufferedStats[dataName]));return self.bufferedStats[dataName];}statSetBuffered(dataName,value){assert(isDefined(self.bufferedStats[dataName]));if(!self rankingEnabled())return;self.bufferedStats[dataName]=value;}statAddBuffered(dataName,value){assert(isDefined(self.bufferedStats[dataName]));if(!self rankingEnabled())return;curValue=statGetBuffered(dataName);statSetBuffered(dataName,curValue+value);}