#include maps\mp\_utility;
#include maps\mp\gametypes\_hud_util;
#include common_scripts\utility;
TimeUntilWaveSpawn(minimumWait){if(!self.hasSpawned)return 0;earliestSpawnTime=gettime()+minimumWait*1000;lastWaveTime=level.lastWave[self.pers["team"]];waveDelay=level.waveDelay[self.pers["team"]]*1000;numWavesPassedEarliestSpawnTime=(earliestSpawnTime-lastWaveTime)/waveDelay;numWaves=ceil(numWavesPassedEarliestSpawnTime);timeOfSpawn=lastWaveTime+numWaves*waveDelay;if(isDefined(self.respawnTimerStartTime)){timeAlreadyPassed=(gettime()-self.respawnTimerStartTime)/1000.0;if(self.respawnTimerStartTime<lastWaveTime)return 0;}if(isdefined(self.waveSpawnIndex))timeOfSpawn+=50*self.waveSpawnIndex;return(timeOfSpawn-gettime())/1000;}TeamKillDelay(){teamKills=self.pers["teamkills"];if(level.maxAllowedTeamKills<0||teamkills<=level.maxAllowedTeamKills)return 0;exceeded=(teamkills-level.maxAllowedTeamKills);return maps\mp\gametypes\_tweakables::getTweakableValue("team","teamkillspawndelay")*exceeded;}TimeUntilSpawn(includeTeamkillDelay){if((level.inGracePeriod&&!self.hasSpawned)||level.gameended)return 0;if(isDefined(level.rdyup)&&level.rdyup)return 0;if(isDefined(game["PROMOD_MATCH_MODE"])&&game["PROMOD_MATCH_MODE"]=="strat")return 0;respawnDelay=0;if(self.hasSpawned){result=self[[level.onRespawnDelay]]();if(isDefined(result))respawnDelay=result;else respawnDelay=getDvarInt("scr_"+level.gameType+"_playerrespawndelay");if(includeTeamkillDelay&&self.pers["teamKillPunish"])respawnDelay+=TeamKillDelay();if(isDefined(self.respawnTimerStartTime)){timeAlreadyPassed=(gettime()-self.respawnTimerStartTime)/1000.0;respawnDelay-=timeAlreadyPassed;if(respawnDelay<0)respawnDelay=0;}}waveBased=(getDvarInt("scr_"+level.gameType+"_waverespawndelay")>0);if(waveBased)return self TimeUntilWaveSpawn(respawnDelay);return respawnDelay;}maySpawn(){if(isDefined(level.rdyup)&&level.rdyup)return true;if(isDefined(game["PROMOD_MATCH_MODE"])&&game["PROMOD_MATCH_MODE"]=="strat")return true;if(getGametypeNumLives()||isDefined(level.disableSpawning)){if(isDefined(level.disableSpawning)&&level.disableSpawning)return false;if(self.pers["teamKillPunish"])return false;if(!self.pers["lives"]&&gameHasStarted()){return false;}else if(gameHasStarted()){if(!level.inGracePeriod&&!self.hasSpawned)return false;}}return true;}spawnClient(){assert(isDefined(self.team));assert(isValidClass(self.class));if(!self maySpawn()){currentorigin=self.origin;currentangles=self.angles;self notify("attempted_spawn");if(self.pers["teamKillPunish"]){self.pers["teamkills"]=max(self.pers["teamkills"]-1,0);setLowerMessage("friendly_fire",&"MP_FRIENDLY_FIRE_WILL_NOT");if(!self.hasSpawned&&self.pers["teamkills"]<=level.maxAllowedTeamkills)self.pers["teamKillPunish"]=false;}else if(isRoundBased()&&!isLastRound()){setLowerMessage("spawn_info",game["strings"]["spawn_next_round"]);self thread removeSpawnMessageShortly(3.0);}self thread spawnSpectator(currentorigin+(0,0,60),currentangles);return;}if(self.waitingToSpawn)return;self.waitingToSpawn=true;self waitAndSpawnClient();if(isdefined(self))self.waitingToSpawn=false;}waitAndSpawnClient(){self endon("disconnect");self endon("end_respawn");level endon("game_ended");self notify("attempted_spawn");spawnedAsSpectator=false;if(self.pers["teamKillPunish"]){teamKillDelay=TeamKillDelay();if(teamKillDelay>0){setLowerMessage("friendly_fire",&"MP_FRIENDLY_FIRE_WILL_NOT",teamKillDelay);self thread respawn_asSpectator(self.origin+(0,0,60),self.angles);spawnedAsSpectator=true;wait(teamKillDelay);clearLowerMessage("friendly_fire");self.respawnTimerStartTime=gettime();}self.pers["teamKillPunish"]=false;}else if(TeamKillDelay()){self.pers["teamkills"]=max(self.pers["teamkills"]-1,0);}if(!isdefined(self.waveSpawnIndex)&&isdefined(level.wavePlayerSpawnIndex[self.team])){self.waveSpawnIndex=level.wavePlayerSpawnIndex[self.team];level.wavePlayerSpawnIndex[self.team]++;}timeUntilSpawn=TimeUntilSpawn(false);self thread predictAboutToSpawnPlayerOverTime(timeUntilSpawn);if(timeUntilSpawn>0){setLowerMessage("spawn_info",game["strings"]["waiting_to_spawn"],timeUntilSpawn);if(!spawnedAsSpectator)self thread respawn_asSpectator(self.origin+(0,0,60),self.angles);spawnedAsSpectator=true;self waitForTimeOrNotify(timeUntilSpawn,"force_spawn");self notify("stop_wait_safe_spawn_button");}waveBased=(getDvarInt("scr_"+level.gameType+"_waverespawndelay")>0);if(maps\mp\gametypes\_tweakables::getTweakableValue("player","forcerespawn")==0&&self.hasSpawned&&!waveBased&&!self.wantSafeSpawn){setLowerMessage("spawn_info",game["strings"]["press_to_spawn"]);if(!spawnedAsSpectator)self thread respawn_asSpectator(self.origin+(0,0,60),self.angles);spawnedAsSpectator=true;self waitRespawnButton();}self.waitingToSpawn=false;self clearLowerMessage("spawn_info");self.waveSpawnIndex=undefined;self thread spawnPlayer();}waitRespawnButton(){self endon("disconnect");self endon("end_respawn");while(1){if(self useButtonPressed())break;wait.05;}}removeSpawnMessageShortly(delay){self endon("disconnect");level endon("game_ended");waittillframeend;self endon("end_respawn");wait delay;self clearLowerMessage("spawn_info",2.0);}getDeathSpawnPoint(){spawnpoint=spawn("script_origin",self.origin);spawnpoint hide();spawnpoint.angles=self.angles;return spawnpoint;}predictAboutToSpawnPlayerOverTime(preduration){self endon("disconnect");self endon("spawned");self endon("used_predicted_spawnpoint");self notify("predicting_about_to_spawn_player");self endon("predicting_about_to_spawn_player");if(preduration<=0)return;if(preduration>1.0)wait preduration-1.0;self predictAboutToSpawnPlayer();self PredictStreamPos(self.predictedSpawnPoint.origin+(0,0,60),self.predictedSpawnPoint.angles);self.predictedSpawnPointTime=gettime();for(i=0;i<30;i++){wait.4;prevPredictedSpawnPoint=self.predictedSpawnPoint;self predictAboutToSpawnPlayer();if(self.predictedSpawnPoint!=prevPredictedSpawnPoint){self PredictStreamPos(self.predictedSpawnPoint.origin+(0,0,60),self.predictedSpawnPoint.angles);self.predictedSpawnPointTime=gettime();}}}predictAboutToSpawnPlayer(){assert(!isReallyAlive(self));if(self TimeUntilSpawn(true)>1.0){spawnpointname="mp_global_intermission";spawnpoints=getentarray(spawnpointname,"classname");assert(spawnpoints.size);self.predictedSpawnPoint=maps\mp\gametypes\_spawnlogic::getSpawnpoint_Random(spawnpoints);return;}if(isDefined(self.setSpawnPoint)){self.predictedSpawnPoint=self.setSpawnPoint;return;}spawnPoint=self[[level.getSpawnPoint]]();self.predictedSpawnPoint=spawnPoint;}checkPredictedSpawnpointCorrectness(spawnpointorigin){self notify("used_predicted_spawnpoint");self.predictedSpawnPoint=undefined;}percentage(a,b){return a+" ("+int(a/b*100)+"%)";}getSpawnOrigin(spawnpoint){if(!positionWouldTelefrag(spawnpoint.origin))return spawnpoint.origin;if(!isdefined(spawnpoint.alternates))return spawnpoint.origin;foreach(alternate in spawnpoint.alternates){if(!positionWouldTelefrag(alternate))return alternate;}return spawnpoint.origin;}spawnPlayer(){self endon("disconnect");self endon("joined_spectators");self notify("spawned");self notify("end_respawn");spawnPoint=self[[level.getSpawnPoint]]();assert(isDefined(spawnPoint));assert(isDefined(spawnPoint.origin));assert(isDefined(spawnPoint.angles));spawnOrigin=spawnpoint.origin;spawnAngles=spawnpoint.angles;self setSpawnVariables();hadSpawned=self.hasSpawned;self.fauxDead=undefined;self.killsThisLife=[];self updateSessionState("playing","");self ClearKillcamState();self.cancelkillcam=1;self openMenu("killedby_card_hide");self.maxhealth=maps\mp\gametypes\_tweakables::getTweakableValue("player","maxhealth");self.health=self.maxhealth;self.friendlydamage=undefined;self.hasSpawned=true;self.spawnTime=getTime();self.wasTI=!isDefined(spawnPoint);self.afk=false;self.lastStand=undefined;self.infinalStand=undefined;self.inC4Death=undefined;self.damagedPlayers=[];self.moveSpeedScaler=1;self.killStreakScaler=1;self.xpScaler=1;self.objectiveScaler=1;self.inLastStand=false;self.clampedHealth=undefined;self.shieldDamage=0;self.shieldBulletHits=0;self.recentShieldXP=0;self.disabledWeapon=0;self.disabledWeaponSwitch=0;self.disabledOffhandWeapons=0;self resetUsability();if(self.pers["lives"]==getGametypeNumLives()){maps\mp\gametypes\_playerlogic::addToLivesCount();}if(self.pers["lives"])self.pers["lives"]--;self maps\mp\gametypes\_playerlogic::addToAliveCount();if(!hadSpawned||gameHasStarted()||(gameHasStarted()&&level.inGracePeriod&&self.hasDoneCombat))self maps\mp\gametypes\_playerlogic::removeFromLivesCount();if(!self.wasAliveAtMatchStart){acceptablePassedTime=20;if(getTimeLimit()>0&&acceptablePassedTime<getTimeLimit()*60/4)acceptablePassedTime=getTimeLimit()*60/4;if(level.inGracePeriod||getTimePassed()<acceptablePassedTime*1000)self.wasAliveAtMatchStart=true;}self setClientDvar("cg_thirdPerson","0");self setDepthOfField(0,0,512,512,4,0);if(isDefined(spawnPoint)){self maps\mp\gametypes\_spawnlogic::finalizeSpawnpointChoice(spawnpoint);spawnOrigin=getSpawnOrigin(spawnpoint);spawnAngles=spawnpoint.angles;}else{self.lastSpawnTime=getTime();}self.spawnPos=spawnOrigin;self spawn(spawnOrigin,spawnAngles);[[level.onSpawnPlayer]]();if(isDefined(spawnPoint))self checkPredictedSpawnpointCorrectness(spawnPoint.origin);prof_begin("spawnPlayer_postUTS");assert(isValidClass(self.class));self maps\mp\gametypes\_class::setClass(self.class);self maps\mp\gametypes\_class::giveLoadout(self.team,self.class);if(getDvarInt("camera_thirdPerson"))self setThirdPersonDOF(true);if(!gameFlag("prematch_done")&&((game["PROMOD_MATCH_MODE"]!="strat"&&game["PROMOD_MATCH_MODE"]!="match"&&!level.allowReadyUp)||level.gametype!="sd"))self freezeControlsWrapper(true);else self freezeControlsWrapper(false);if(!gameFlag("prematch_done")||!hadSpawned&&game["state"]=="playing"){self setClientDvar("scr_objectiveText",getObjectiveHintText(self.pers["team"]));team=self.pers["team"];if(game["status"]=="overtime")thread maps\mp\gametypes\_hud_message::oldNotifyMessage(game["strings"]["overtime"],game["strings"]["overtime_hint"],undefined,(1,0,0),"mp_last_stand");else if(getIntProperty("useRelativeTeamColors",0))thread maps\mp\gametypes\_hud_message::oldNotifyMessage(game["strings"][team+"_name"],undefined,game["icons"][team]+"_blue",game["colors"]["blue"]);else thread maps\mp\gametypes\_hud_message::oldNotifyMessage(getDvar("g_TeamName_"+team),undefined,game["icons"][team],game["colors"][team]);}prof_end("spawnPlayer_postUTS");waittillframeend;self notify("spawned_player");level notify("player_spawned",self);if(game["state"]=="postgame"){assert(!level.intermission);self maps\mp\gametypes\_gamelogic::freezePlayerForRoundEnd();}self thread promod\shoutcast::main();self thread promod\shoutcast::assignShoutID();thread promod\shoutcast::setShoutClass();}spawnSpectator(origin,angles){self notify("spawned");self notify("end_respawn");in_spawnSpectator(origin,angles);}respawn_asSpectator(origin,angles){in_spawnSpectator(origin,angles);}in_spawnSpectator(origin,angles){self setSpawnVariables();if(isDefined(self.pers["team"])&&self.pers["team"]=="spectator"&&!level.gameEnded)self clearLowerMessage("spawn_info");self.sessionstate="spectator";self ClearKillcamState();self.friendlydamage=undefined;if(isDefined(self.pers["team"])&&self.pers["team"]=="spectator"){self.statusicon="";self thread promod\shoutcast::assignShoutID();}else self.statusicon="hud_status_dead";maps\mp\gametypes\_spectating::setSpectatePermissions();onSpawnSpectator(origin,angles);if(level.teamBased)self setDepthOfField(0,128,512,4000,6,1.8);}getPlayerFromClientNum(clientNum){if(clientNum<0)return undefined;for(i=0;i<level.players.size;i++){if(level.players[i]getEntityNumber()==clientNum)return level.players[i];}return undefined;}onSpawnSpectator(origin,angles){if(isDefined(origin)&&isDefined(angles)){self SetSpectateDefaults(origin,angles);self spawn(origin,angles);self checkPredictedSpawnpointCorrectness(origin);return;}spawnpointname="mp_global_intermission";spawnpoints=getentarray(spawnpointname,"classname");assert(spawnpoints.size);spawnpoint=maps\mp\gametypes\_spawnlogic::getSpawnpoint_Random(spawnpoints);self SetSpectateDefaults(spawnpoint.origin,spawnpoint.angles);self spawn(spawnpoint.origin,spawnpoint.angles);self checkPredictedSpawnpointCorrectness(spawnpoint.origin);}spawnIntermission(){self endon("disconnect");self notify("spawned");self notify("end_respawn");self setSpawnVariables();self closepopupMenu();self closeInGameMenu();self clearLowerMessages();self freezeControlsWrapper(true);self setClientDvar("cg_everyoneHearsEveryone",1);self.sessionstate="intermission";self ClearKillcamState();self.friendlydamage=undefined;spawnPoints=getEntArray("mp_global_intermission","classname");assertEx(spawnPoints.size,"NO mp_global_intermission SPAWNPOINTS IN MAP");spawnPoint=spawnPoints[0];self spawn(spawnPoint.origin,spawnPoint.angles);self checkPredictedSpawnpointCorrectness(spawnPoint.origin);self setDepthOfField(0,128,512,4000,6,1.8);}spawnEndOfGame(){if(1){self freezeControlsWrapper(true);self spawnSpectator();self freezeControlsWrapper(true);return;}self notify("spawned");self notify("end_respawn");self setSpawnVariables();self closepopupMenu();self closeInGameMenu();self clearLowerMessages();self setClientDvar("cg_everyoneHearsEveryone",1);self.sessionstate="dead";self ClearKillcamState();self.friendlydamage=undefined;spawnPoints=getEntArray("mp_global_intermission","classname");assertEx(spawnPoints.size,"NO mp_global_intermission SPAWNPOINTS IN MAP");spawnPoint=spawnPoints[0];self spawn(spawnPoint.origin,spawnPoint.angles);self checkPredictedSpawnpointCorrectness(spawnPoint.origin);spawnPoint setModel("tag_origin");self playerLinkTo(spawnPoint);self PlayerHide();self freezeControlsWrapper(true);self setDepthOfField(0,128,512,4000,6,1.8);}setSpawnVariables(){self StopShellshock();self StopRumble("damage_heavy");}notifyConnecting(){waittillframeend;if(isDefined(self))level notify("connecting",self);}Callback_PlayerDisconnect(){if(!isDefined(self.connected))return;self removePlayerOnDisconnect();if(!level.teamBased)game["roundsWon"][self.guid]=undefined;if(isDefined(self.score)&&isDefined(self.pers["team"])){setPlayerTeamRank(self,self.clientid,self.score-5*self.deaths);}lpselfnum=self getEntityNumber();lpGuid=self.guid;logPrint("Q;"+lpGuid+";"+lpselfnum+";"+self.name+"\n");self thread maps\mp\_events::disconnected();if(level.gameEnded)self maps\mp\gametypes\_gamescore::removeDisconnectedPlayerFromPlacement();if(isDefined(self.team))self maps\mp\gametypes\_playerlogic::removeFromTeamCount();if(self.sessionstate=="playing")self maps\mp\gametypes\_playerlogic::removeFromAliveCount(true);else if(self.sessionstate=="spectator")level thread maps\mp\gametypes\_gamelogic::updateGameEvents();for(i=0;i<level.players.size;i++){if(level.players[i].pers["team"]=="spectator")level.players[i]thread promod\shoutcast::resetShoutcast();}if(isDefined(self.pers["team"])&&(self.pers["team"]=="allies"||self.pers["team"]=="axis"))thread maps\mp\gametypes\_promod::updateClassAvailability(self.pers["team"]);}removePlayerOnDisconnect(){found=false;for(entry=0;entry<level.players.size;entry++){if(level.players[entry]==self){found=true;while(entry<level.players.size-1){level.players[entry]=level.players[entry+1];assert(level.players[entry]!=self);entry++;}level.players[entry]=undefined;break;}}assert(found);}initClientDvars(){makeDvarServerInfo("cg_drawTalk",1);makeDvarServerInfo("cg_drawCrosshair",1);makeDvarServerInfo("cg_drawCrosshairNames",0);makeDvarServerInfo("cg_hudGrenadeIconMaxRangeFrag",250);if(level.hardcoreMode){setDvar("cg_drawTalk",3);setDvar("cg_drawCrosshair",0);setDvar("cg_drawCrosshairNames",1);setDvar("cg_hudGrenadeIconMaxRangeFrag",0);}self setClientDvars("cg_drawSpectatorMessages",1,"g_compassShowEnemies",0,"cg_scoreboardPingGraph",0);self.radarMode="normal_radar";self.hasRadar=false;if(getGametypeNumLives()){self setClientDvars("cg_deadChatWithDead",1,"cg_deadChatWithTeam",0,"cg_deadHearTeamLiving",0,"cg_deadHearAllLiving",0);}else{self setClientDvars("cg_deadChatWithDead",0,"cg_deadChatWithTeam",1,"cg_deadHearTeamLiving",1,"cg_deadHearAllLiving",0);}if(level.teamBased)self setClientDvars("cg_everyonehearseveryone",0);self setClientDvar("ui_altscene",0);}Callback_PlayerConnect(){thread notifyConnecting();self.statusicon="hud_status_connecting";self waittill("begin");self.statusicon="";connectTime=undefined;level notify("connected",self);self.connected=true;if(self isHost())level.player=self;if(!isDefined(self.pers["score"]))iPrintLn(&"MP_CONNECTED",self);self.usingOnlineDataOffline=self isUsingOnlineDataOffline();self initClientDvars();self initPlayerStats();if(getdvar("r_reflectionProbeGenerate")=="1")level waittill("eternity");self.guid=self getGuid();firstConnect=false;if(!isDefined(self.pers["clientid"])){self.pers["clientid"]=game["clientid"];game["clientid"]++;firstConnect=true;}self.clientid=self.pers["clientid"];logPrint("J;"+self.guid+";"+self getEntityNumber()+";"+self.name+"\n");if(matchMakingGame()&&game["clientid"]<=24&&game["clientid"]!=getMatchData("playerCount")){setMatchData("playerCount",game["clientid"]);setMatchData("players",self.clientid,"xuid",self getXuid());assert(getdvarint("scr_runlevelandquit")==1||(level.teamBased&&(self.sessionteam=="allies"||self.sessionteam=="axis"))||(!level.teamBased&&self.sessionteam=="none"));setMatchData("players",self.clientid,"team",self.sessionteam);}if(!level.teamBased)game["roundsWon"][self.guid]=0;self.leaderDialogQueue=[];self.leaderDialogActive="";self.leaderDialogGroups=[];self.leaderDialogGroup="";if(!isDefined(self.pers["cur_kill_streak"]))self.pers["cur_kill_streak"]=0;if(!isDefined(self.pers["cur_death_streak"]))self.pers["cur_death_streak"]=0;if(!isDefined(self.pers["filmtweak"]))self.pers["filmtweak"]=4;if(!isDefined(self.pers["normalmap"]))self.pers["normalmap"]=5;if(!isDefined(self.pers["fovscale"]))self.pers["fovscale"]=6;if(!isDefined(self.pers["blur"]))self.pers["blur"]=7;if(!isDefined(self.pers["cur_demo"]))self.pers["cur_demo"]=8;self.kill_streak=0;self.lastGrenadeSuicideTime=-1;self.teamkillsThisRound=0;self.hasSpawned=false;self.waitingToSpawn=false;self.wantSafeSpawn=false;self.wasAliveAtMatchStart=false;self.moveSpeedScaler=1;self.killStreakScaler=1;self.xpScaler=1;self.objectiveScaler=1;self.isSniper=false;self.saved_actionSlotData=[];for(slotID=1;slotID<=4;slotID++){self.saved_actionSlotData[slotID]=spawnStruct();self.saved_actionSlotData[slotID].type="";self.saved_actionSlotData[slotID].item=undefined;}self thread maps\mp\_flashgrenades::monitorFlash();waittillframeend;level.players[level.players.size]=self;if(level.teambased)self updateScores();if(game["state"]=="postgame"){self.connectedPostGame=true;self maps\mp\gametypes\_menus::addToTeam("spectator",true);self setClientDvars("cg_drawSpectatorMessages",0);self setClientDvar("cg_fov",80);self thread promod\_promod_util::set_dvars();thread maps\mp\gametypes\_promod::updateClassAvailability("allies");thread maps\mp\gametypes\_promod::updateClassAvailability("axis");self setclientdvar("g_scriptMainMenu",game["menu_team"]);spawnIntermission();return;}if(firstConnect){self setclientdvar("cg_fov",80);}level endon("game_ended");if(!isDefined(self.pers["team"])){self[[level.spectator]]();self setclientdvar("g_scriptMainMenu",game["menu_team"]);thread maps\mp\gametypes\_promod::updateClassAvailability("allies");thread maps\mp\gametypes\_promod::updateClassAvailability("axis");self thread promod\_promod_util::set_Dvars();self maps\mp\gametypes\_menus::beginTeamChoice();}else{self maps\mp\gametypes\_menus::addToTeam(self.pers["team"],true);if(isValidClass(self.pers["class"])){self thread spawnClient();return;}self thread spawnSpectator();if(self.pers["team"]=="spectator"&&((isDefined(game["PROMOD_MATCH_MODE"])&&game["PROMOD_MATCH_MODE"]=="match"&&firstConnect)||(isDefined(game["PROMOD_MATCH_MODE"])&&game["PROMOD_MATCH_MODE"]!="match")))self maps\mp\gametypes\_menus::beginTeamChoice();else self maps\mp\gametypes\_menus::beginClassChoice();}}Callback_PlayerMigrated(){}forceSpawn(){self endon("death");self endon("disconnect");self endon("spawned");wait(60.0);if(self.hasSpawned)return;if(self.pers["team"]=="spectator")return;if(!isValidClass(self.pers["class"])){self.pers["class"]="CLASS_CUSTOM1";self.class=self.pers["class"];}self closeMenus();self thread spawnClient();}updateSessionState(sessionState,statusIcon){assert(sessionState=="playing"||sessionState=="dead"||sessionState=="spectator"||sessionState=="intermission");self.sessionstate=sessionState;self.statusicon=statusIcon;}initPlayerStats(){self initPersStat("score");self.score=self.pers["score"];self initPersStat("deaths");self.deaths=self getPersStat("deaths");self initPersStat("suicides");self.suicides=self getPersStat("suicides");self initPersStat("kills");self.kills=self getPersStat("kills");self initPersStat("headshots");self.headshots=self getPersStat("headshots");self initPersStat("assists");self.assists=self getPersStat("assists");self initPersStat("teamkills");if(!isDefined(self.pers["teamKillPunish"]))self.pers["teamKillPunish"]=false;self initPersStat("longestStreak");self.pers["lives"]=getGametypeNumLives();}addToTeamCount(){assert(isPlayer(self));assert(isDefined(self.team));assert(isDefined(self.pers["team"]));assert(self.team==self.pers["team"]);level.teamCount[self.team]++;maps\mp\gametypes\_gamelogic::updateGameEvents();}removeFromTeamCount(){assert(isPlayer(self));assert(isDefined(self.team));assert(isDefined(self.pers["team"]));assert(self.team==self.pers["team"]);level.teamCount[self.team]--;}addToAliveCount(){assert(isPlayer(self));level.aliveCount[self.team]++;level.hasSpawned[self.team]++;if(level.aliveCount["allies"]+level.aliveCount["axis"]>level.maxPlayerCount)level.maxPlayerCount=level.aliveCount["allies"]+level.aliveCount["axis"];thread promod\_promod_util::aliveCounter();}removeFromAliveCount(disconnected){assert(isPlayer(self));if(isDefined(self.switching_teams)||isDefined(disconnected)){self maps\mp\gametypes\_playerlogic::removeAllFromLivesCount();if(isDefined(self.switching_teams))self.pers["lives"]=0;}level.aliveCount[self.team]--;thread promod\_promod_util::aliveCounter();return maps\mp\gametypes\_gamelogic::updateGameEvents();}addToLivesCount(){assert(isPlayer(self));level.livesCount[self.team]+=self.pers["lives"];}removeFromLivesCount(){assert(isPlayer(self));level.livesCount[self.team]--;level.livesCount[self.team]=int(max(0,level.livesCount[self.team]));}removeAllFromLivesCount(){assert(isPlayer(self));level.livesCount[self.team]-=self.pers["lives"];level.livesCount[self.team]=int(max(0,level.livesCount[self.team]));}