#include common_scripts\utility;
#include maps\mp\_utility;
getAttachmentList(){attachmentList=[];index=0;attachmentName=tableLookup("mp/attachmentTable.csv",9,index,4);while(attachmentName!=""){attachmentList[attachmentList.size]=attachmentName;index++;attachmentName=tableLookup("mp/attachmentTable.csv",9,index,4);}return alphabetize(attachmentList);}init(){attachmentList=getAttachmentList();max_weapon_num=149;level.weaponList=[];for(weaponId=0;weaponId<=max_weapon_num;weaponId++){weapon_name=tablelookup("mp/statstable.csv",0,weaponId,4);if(weapon_name=="")continue;if(!isSubStr(tableLookup("mp/statsTable.csv",0,weaponId,2),"weapon_"))continue;level.weaponList[level.weaponList.size]=weapon_name+"_mp";attachmentNames=[];for(innerLoopCount=0;innerLoopCount<10;innerLoopCount++){attachmentName=tablelookup("mp/statStable.csv",0,weaponId,innerLoopCount+11);if(attachmentName=="")break;attachmentNames[attachmentName]=true;}attachments=[];foreach(attachmentName in attachmentList){if(!isDefined(attachmentNames[attachmentName]))continue;level.weaponList[level.weaponList.size]=weapon_name+"_"+attachmentName+"_mp";attachments[attachments.size]=attachmentName;}attachmentCombos=[];for(i=0;i<(attachments.size-1);i++){colIndex=tableLookupRowNum("mp/attachmentCombos.csv",0,attachments[i]);for(j=i+1;j<attachments.size;j++){if(tableLookup("mp/attachmentCombos.csv",0,attachments[j],colIndex)=="no")continue;attachmentCombos[attachmentCombos.size]=attachments[i]+"_"+attachments[j];}}foreach(combo in attachmentCombos){level.weaponList[level.weaponList.size]=weapon_name+"_"+combo+"_mp";}}foreach(weaponName in level.weaponList){precacheItem(weaponName);}precacheItem("flare_mp");precacheItem("scavenger_bag_mp");precacheItem("frag_grenade_short_mp");precacheItem("destructible_car");precacheShellShock("default");thread maps\mp\_flashgrenades::main();thread maps\mp\_entityheadicons::init();level.side_arm_array=[];level.grenade_array=[];level.inventory_array=[];level.stow_priority_model_array=[];level.stow_offset_array=[];max_weapon_num=149;for(i=0;i<max_weapon_num;i++){weapon=tableLookup("mp/statsTable.csv",0,i,4);stow_model=tableLookup("mp/statsTable.csv",0,i,9);if(stow_model=="")continue;precacheModel(stow_model);if(isSubStr(stow_model,"weapon_stow_"))level.stow_offset_array[weapon]=stow_model;else level.stow_priority_model_array[weapon+"_mp"]=stow_model;}level thread onPlayerConnect();}addmissiletosighttraces(){}getDamageableEnts(pos,radius,doLOS,startRadius){}damageEnt(eInflictor,eAttacker,iDamage,sMeansOfDeath,sWeapon,damagepos,damagedir){}onPlayerConnect(){for(;;){level waittill("connected",player);player.weaponList=[];player.hits=0;player.hasDoneCombat=false;player thread onPlayerSpawned();}}onPlayerSpawned(){self endon("disconnect");for(;;){self waittill("spawned_player");self.hasDoneCombat=false;self thread watchGrenadeUsage();self.lastHitTime=[];}}dropWeaponForDeath(attacker){weapon=self getCurrentWeapon();if(!isdefined(weapon)||!self hasWeapon(weapon)){return;}weaponClass=getWeaponClass(weapon);if(isPrimaryWeapon(weapon)){switch(weaponClass){case"weapon_assault":if(!getDvarInt("class_assault_allowdrop"))return;break;case"weapon_smg":if(!getDvarInt("class_specops_allowdrop"))return;break;case"weapon_sniper":if(!getDvarInt("class_sniper_allowdrop"))return;break;case"weapon_shotgun":if(!getDvarInt("class_demolitions_allowdrop"))return;break;case"weapon_pistol":break;default:return;}}clipAmmo=self GetWeaponAmmoClip(weapon);if(!clipAmmo)return;stockAmmo=self GetWeaponAmmoStock(weapon);stockMax=WeaponMaxAmmo(weapon);if(stockAmmo>stockMax)stockAmmo=stockMax;item=self dropItem(weapon);item ItemWeaponSetAmmo(clipAmmo,stockAmmo);self.droppedDeathWeapon=true;if(!isDefined(game["PROMOD_MATCH_MODE"])||game["PROMOD_MATCH_MODE"]!="match"||(game["PROMOD_MATCH_MODE"]=="match"&&level.gametype!="sd")||game["promod_do_readyup"])item thread deletePickupAfterAWhile();}deletePickupAfterAWhile(){self endon("death");wait 180;if(!isDefined(self))return;self delete();}watchGrenadeUsage(){self endon("death");self endon("disconnect");self.throwingGrenade=undefined;self.gotPullbackNotify=false;for(;;){self waittill("grenade_pullback",weaponName);self.hasDoneCombat=true;self.throwingGrenade=weaponName;self.gotPullbackNotify=true;self beginGrenadeTracking();self.throwingGrenade=undefined;}}beginGrenadeTracking(){self endon("death");self endon("disconnect");self endon("offhand_end");self endon("weapon_change");startTime=getTime();self waittill("grenade_fire",grenade,weaponName);if((getTime()-startTime>1000)&&weaponName=="frag_grenade_mp")grenade.isCooked=true;self.changingWeapon=undefined;if(weaponName=="frag_grenade_mp"){grenade thread maps\mp\gametypes\_shellshock::grenade_earthQuake();grenade.originalOwner=self;}if(weaponName=="flash_grenade_mp")grenade.owner=self;}onWeaponDamage(eInflictor,sWeapon,meansOfDeath,damage){self endon("death");self endon("disconnect");maps\mp\gametypes\_shellshock::shellshockOnDamage(meansOfDeath,damage);}isPrimaryWeapon(weaponname){return isDefined(level.primary_weapon_array[weaponname]);}isOffhandWeapon(weapName){if(weapName=="none")return false;return(weaponInventoryType(weapName)=="offhand");}isSideArm(weapName){if(weapName=="none")return false;if(weaponInventoryType(weapName)!="primary")return false;return(weaponClass(weapName)=="pistol");}isGrenade(weapName){weapClass=weaponClass(weapName);weapType=weaponInventoryType(weapName);if(weapClass!="grenade")return false;if(weapType!="offhand")return false;}updateMoveSpeedScale(weaponType){self setMoveSpeedScale(1.0-0.05*int(isDefined(self.curClass)&&self.curClass=="assault"));}