#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\gametypes\_hud_util;
main(){if(getdvar("mapname")=="mp_background")return;maps\mp\gametypes\_globallogic::init();maps\mp\gametypes\_callbacksetup::SetupCallbacks();maps\mp\gametypes\_globallogic::SetupCallbacks();registerRoundSwitchDvar(level.gameType,1,0,999);registerTimeLimitDvar(level.gameType,1.5,0,1440);registerScoreLimitDvar(level.gameType,1,0,999);registerRoundLimitDvar(level.gameType,0,0,999);registerWinLimitDvar(level.gameType,4,0,999);registerNumLivesDvar(level.gameType,1,0,10);registerHalfTimeDvar(level.gameType,0,0,1);level.objectiveBased=true;level.teamBased=true;level.onPrecacheGameType=::onPrecacheGameType;level.onStartGameType=::onStartGameType;level.getSpawnPoint=::getSpawnPoint;level.onSpawnPlayer=::onSpawnPlayer;level.onPlayerKilled=::onPlayerKilled;level.onDeadEvent=::onDeadEvent;level.onOneLeftEvent=::onOneLeftEvent;level.onTimeLimit=::onTimeLimit;level.onNormalDeath=::onNormalDeath;game["dialog"]["gametype"]="searchdestroy";if(getDvarInt("g_hardcore"))game["dialog"]["gametype"]="hc_"+game["dialog"]["gametype"];else if(getDvarInt("camera_thirdPerson"))game["dialog"]["gametype"]="thirdp_"+game["dialog"]["gametype"];else if(getDvarInt("scr_diehard"))game["dialog"]["gametype"]="dh_"+game["dialog"]["gametype"];else if(getDvarInt("scr_"+level.gameType+"_promode"))game["dialog"]["gametype"]=game["dialog"]["gametype"]+"_pro";game["dialog"]["offense_obj"]="obj_destroy";game["dialog"]["defense_obj"]="obj_defend";}onPrecacheGameType(){game["bomb_dropped_sound"]="mp_war_objective_lost";game["bomb_recovered_sound"]="mp_war_objective_taken";game["voice"]["allies"]=maps\mp\gametypes\_teams::getTeamVoicePrefix("allies")+"1mc_";game["voice"]["axis"]=maps\mp\gametypes\_teams::getTeamVoicePrefix("axis")+"1mc_";game["dialog"]["bomb_defused"]="bomb_defused";game["dialog"]["bomb_planted"]="bomb_planted";precacheShader("waypoint_bomb");precacheShader("hud_suitcase_bomb");precacheShader("waypoint_target");precacheShader("waypoint_target_a");precacheShader("waypoint_target_b");precacheShader("waypoint_defend");precacheShader("waypoint_defend_a");precacheShader("waypoint_defend_b");precacheShader("waypoint_defuse");precacheShader("waypoint_defuse_a");precacheShader("waypoint_defuse_b");precacheShader("waypoint_escort");precacheString(&"MP_EXPLOSIVES_RECOVERED_BY");precacheString(&"MP_EXPLOSIVES_DROPPED_BY");precacheString(&"MP_EXPLOSIVES_PLANTED_BY");precacheString(&"MP_EXPLOSIVES_DEFUSED_BY");precacheString(&"PLATFORM_HOLD_TO_PLANT_EXPLOSIVES");precacheString(&"PLATFORM_HOLD_TO_DEFUSE_EXPLOSIVES");precacheString(&"MP_CANT_PLANT_WITHOUT_BOMB");precacheString(&"MP_PLANTING_EXPLOSIVE");precacheString(&"MP_DEFUSING_EXPLOSIVE");}onStartGameType(){if(!isDefined(game["switchedsides"]))game["switchedsides"]=false;if(game["switchedsides"]){oldAttackers=game["attackers"];oldDefenders=game["defenders"];game["attackers"]=oldDefenders;game["defenders"]=oldAttackers;if(game["attackers"]=="allies"&&game["defenders"]=="axis"){setDvar("g_ScoresColor_Allies","0.8 0 0 1");setDvar("g_ScoresColor_Axis","0 0.5 1 1");setDvar("g_TeamColor_Allies","0.8 0 0 1");setDvar("g_TeamColor_Axis","0 0.5 1 1");setDvar("g_TeamName_Allies","Attack");setDvar("g_TeamName_Axis","Defence");}else{setDvar("g_ScoresColor_Allies","0 0.5 1 1");setDvar("g_ScoresColor_Axis","0.8 0 0 1");setDvar("g_TeamColor_Allies","0 0.5 1 1");setDvar("g_TeamColor_Axis","0.8 0 0 1");setDvar("g_TeamName_Allies","Defence");setDvar("g_TeamName_Axis","Attack");}}setClientNameMode("manual_change");game["strings"]["target_destroyed"]=&"MP_TARGET_DESTROYED";game["strings"]["bomb_defused"]=&"MP_BOMB_DEFUSED";precacheString(game["strings"]["target_destroyed"]);precacheString(game["strings"]["bomb_defused"]);level._effect["bombexplosion"]=loadfx("explosions/tanker_explosion");setObjectiveText(game["attackers"],&"OBJECTIVES_SD_ATTACKER");setObjectiveText(game["defenders"],&"OBJECTIVES_SD_DEFENDER");if(level.splitscreen){setObjectiveScoreText(game["attackers"],&"OBJECTIVES_SD_ATTACKER");setObjectiveScoreText(game["defenders"],&"OBJECTIVES_SD_DEFENDER");}else{setObjectiveScoreText(game["attackers"],&"OBJECTIVES_SD_ATTACKER_SCORE");setObjectiveScoreText(game["defenders"],&"OBJECTIVES_SD_DEFENDER_SCORE");}level.spawnMins=(0,0,0);level.spawnMaxs=(0,0,0);maps\mp\gametypes\_spawnlogic::placeSpawnPoints("mp_sd_spawn_attacker");maps\mp\gametypes\_spawnlogic::placeSpawnPoints("mp_sd_spawn_defender");level.mapCenter=maps\mp\gametypes\_spawnlogic::findBoxCenter(level.spawnMins,level.spawnMaxs);setMapCenter(level.mapCenter);allowed[0]="sd";allowed[1]="bombzone";allowed[2]="blocker";maps\mp\gametypes\_gameobjects::main(allowed);maps\mp\gametypes\_rank::registerScoreInfo("win",2);maps\mp\gametypes\_rank::registerScoreInfo("loss",1);maps\mp\gametypes\_rank::registerScoreInfo("tie",1.5);maps\mp\gametypes\_rank::registerScoreInfo("kill",5);maps\mp\gametypes\_rank::registerScoreInfo("headshot",0);maps\mp\gametypes\_rank::registerScoreInfo("assist",3);maps\mp\gametypes\_rank::registerScoreInfo("plant",3);maps\mp\gametypes\_rank::registerScoreInfo("defuse",3);thread updateGametypeDvars();thread bombs();}getSpawnPoint(){if(self.pers["team"]==game["attackers"])spawnPointName="mp_sd_spawn_attacker";else spawnPointName="mp_sd_spawn_defender";spawnPoints=maps\mp\gametypes\_spawnlogic::getSpawnpointArray(spawnPointName);assert(spawnPoints.size);spawnpoint=maps\mp\gametypes\_spawnlogic::getSpawnpoint_Random(spawnPoints);return spawnpoint;}onSpawnPlayer(){self.isPlanting=false;self.isDefusing=false;self.isBombCarrier=false;if(level.multiBomb&&!isDefined(self.carryIcon)&&self.pers["team"]==game["attackers"]&&!level.bombPlanted){self.carryIcon=createIcon("hud_suitcase_bomb",50,50);self.carryIcon setPoint("BOTTOM RIGHT","BOTTOM RIGHT",-25,-15);self.carryIcon.alpha=0.75;}level notify("spawned_player");}onPlayerKilled(eInflictor,attacker,iDamage,sMeansOfDeath,sWeapon,vDir,sHitLoc,psOffsetTime,deathAnimDuration,killId){thread checkAllowSpectating();}checkAllowSpectating(){wait(0.05);update=false;if(!level.aliveCount[game["attackers"]]){level.spectateOverride[game["attackers"]].allowEnemySpectate=1;update=true;}if(!level.aliveCount[game["defenders"]]){level.spectateOverride[game["defenders"]].allowEnemySpectate=1;update=true;}if(update)maps\mp\gametypes\_spectating::updateSpectateSettings();}sd_endGame(winningTeam,endReasonText){thread maps\mp\gametypes\_gamelogic::endGame(winningTeam,endReasonText);}onDeadEvent(team){if(level.bombExploded||level.bombDefused)return;if(team=="all"){if(level.bombPlanted)sd_endGame(game["attackers"],getDvar("g_TeamName_"+game["defenders"])+" eliminated");else sd_endGame(game["defenders"],getDvar("g_TeamName_"+game["attackers"])+" eliminated");}else if(team==game["attackers"]){if(level.bombPlanted)return;level thread sd_endGame(game["defenders"],getDvar("g_TeamName_"+game["attackers"])+" eliminated");}else if(team==game["defenders"]){level thread sd_endGame(game["attackers"],getDvar("g_TeamName_"+game["defenders"])+" eliminated");}}onOneLeftEvent(team){if(level.bombExploded||level.bombDefused)return;lastPlayer=getLastLivingPlayer(team);}onNormalDeath(victim,attacker,lifeId){score=maps\mp\gametypes\_rank::getScoreInfoValue("kill");assert(isDefined(score));team=victim.team;if(game["state"]=="postgame"&&(victim.team==game["defenders"]||!level.bombPlanted))attacker.finalKill=true;if(victim.isPlanting){thread maps\mp\_matchdata::logKillEvent(lifeId,"planting");}else if(victim.isBombCarrier){attacker incPlayerStat("bombcarrierkills",1);thread maps\mp\_matchdata::logKillEvent(lifeId,"carrying");}else if(victim.isDefusing){thread maps\mp\_matchdata::logKillEvent(lifeId,"defusing");}if(attacker.isBombCarrier)attacker incPlayerStat("killsasbombcarrier",1);}onTimeLimit(){sd_endGame(game["defenders"],game["strings"]["time_limit_reached"]);}updateGametypeDvars(){level.plantTime=dvarFloatValue("planttime",5,0,20);level.defuseTime=dvarFloatValue("defusetime",7,0,20);level.bombTimer=dvarFloatValue("bombtimer",45,1,300);level.multiBomb=dvarIntValue("multibomb",0,0,1);}bombs(){level.bombPlanted=false;level.bombDefused=false;level.bombExploded=false;trigger=getEnt("sd_bomb_pickup_trig","targetname");if(!isDefined(trigger)){error("No sd_bomb_pickup_trig trigger found in map.");return;}visuals[0]=getEnt("sd_bomb","targetname");if(!isDefined(visuals[0])){error("No sd_bomb script_model found in map.");return;}precacheModel("prop_suitcase_bomb");visuals[0]setModel("prop_suitcase_bomb");if(!level.multiBomb){level.sdBomb=maps\mp\gametypes\_gameobjects::createCarryObject(game["attackers"],trigger,visuals,(0,0,32));level.sdBomb maps\mp\gametypes\_gameobjects::allowCarry("friendly");level.sdBomb maps\mp\gametypes\_gameobjects::set2DIcon("friendly","waypoint_bomb");level.sdBomb maps\mp\gametypes\_gameobjects::set3DIcon("friendly","waypoint_bomb");level.sdBomb maps\mp\gametypes\_gameobjects::setVisibleTeam("friendly");level.sdBomb maps\mp\gametypes\_gameobjects::setCarryIcon("hud_suitcase_bomb");level.sdBomb.onPickup=::onPickup;level.sdBomb.onDrop=::onDrop;}else{trigger delete();visuals[0]delete();}level.bombZones=[];bombZones=getEntArray("bombzone","targetname");for(index=0;index<bombZones.size;index++){trigger=bombZones[index];visuals=getEntArray(bombZones[index].target,"targetname");bombZone=maps\mp\gametypes\_gameobjects::createUseObject(game["defenders"],trigger,visuals,(0,0,64));bombZone maps\mp\gametypes\_gameobjects::allowUse("enemy");bombZone maps\mp\gametypes\_gameobjects::setUseTime(level.plantTime);bombZone maps\mp\gametypes\_gameobjects::setUseText(&"MP_PLANTING_EXPLOSIVE");bombZone maps\mp\gametypes\_gameobjects::setUseHintText(&"PLATFORM_HOLD_TO_PLANT_EXPLOSIVES");if(!level.multiBomb)bombZone maps\mp\gametypes\_gameobjects::setKeyObject(level.sdBomb);label=bombZone maps\mp\gametypes\_gameobjects::getLabel();bombZone.label=label;bombZone maps\mp\gametypes\_gameobjects::set2DIcon("friendly","waypoint_defend"+label);bombZone maps\mp\gametypes\_gameobjects::set2DIcon("enemy","waypoint_target"+label);bombZone maps\mp\gametypes\_gameobjects::setVisibleTeam("any");bombZone.onBeginUse=::onBeginUse;bombZone.onEndUse=::onEndUse;bombZone.onUse=::onUsePlantObject;bombZone.onCantUse=::onCantUse;for(i=0;i<visuals.size;i++){if(isDefined(visuals[i].script_exploder)){bombZone.exploderIndex=visuals[i].script_exploder;break;}}level.bombZones[level.bombZones.size]=bombZone;bombZone.bombDefuseTrig=getent(visuals[0].target,"targetname");assert(isdefined(bombZone.bombDefuseTrig));bombZone.bombDefuseTrig.origin+=(0,0,-10000);bombZone.bombDefuseTrig.label=label;}for(index=0;index<level.bombZones.size;index++){array=[];for(otherindex=0;otherindex<level.bombZones.size;otherindex++){if(otherindex!=index)array[array.size]=level.bombZones[otherindex];}level.bombZones[index].otherBombZones=array;}}onBeginUse(player){if(self maps\mp\gametypes\_gameobjects::isFriendlyTeam(player.pers["team"])){player playSound("mp_bomb_defuse");player.isDefusing=true;if(isDefined(level.sdBombModel))level.sdBombModel hide();}else{player playSound("mp_bomb_plant");player.isPlanting=true;if(level.multibomb){for(i=0;i<self.otherBombZones.size;i++){self.otherBombZones[i]maps\mp\gametypes\_gameobjects::allowUse("none");self.otherBombZones[i]maps\mp\gametypes\_gameobjects::setVisibleTeam("friendly");}}}}onEndUse(team,player,result){if(!isDefined(player))return;if(isAlive(player)){player.isDefusing=false;player.isPlanting=false;}if(self maps\mp\gametypes\_gameobjects::isFriendlyTeam(player.pers["team"])){if(isDefined(level.sdBombModel)&&!result){level.sdBombModel show();}}else{if(level.multibomb&&!result){for(i=0;i<self.otherBombZones.size;i++){self.otherBombZones[i]maps\mp\gametypes\_gameobjects::allowUse("enemy");self.otherBombZones[i]maps\mp\gametypes\_gameobjects::setVisibleTeam("any");}}}}onCantUse(player){player iPrintLnBold(&"MP_CANT_PLANT_WITHOUT_BOMB");}onUsePlantObject(player){if(!self maps\mp\gametypes\_gameobjects::isFriendlyTeam(player.pers["team"])){level thread bombPlanted(self,player);for(index=0;index<level.bombZones.size;index++){if(level.bombZones[index]==self)continue;level.bombZones[index]maps\mp\gametypes\_gameobjects::disableObject();}player notify("bomb_planted");if(getDvarInt("promod_allow_leaderdialog"))leaderDialog("bomb_planted");level.bombOwner=player;iPrintLn(&"MP_EXPLOSIVES_PLANTED_BY",player);player thread maps\mp\gametypes\_rank::giveRankXP("plant");player.bombPlantedTime=getTime();maps\mp\gametypes\_gamescore::givePlayerScore("plant",player);player incPlayerStat("bombsplanted",1);player thread maps\mp\_matchdata::logGameEvent("plant",player.origin);}}onUseDefuseObject(player){player notify("bomb_defused");level thread bombDefused();self maps\mp\gametypes\_gameobjects::disableObject();if(getDvarInt("promod_allow_leaderdialog"))leaderDialog("bomb_defused");iPrintLn(&"MP_EXPLOSIVES_DEFUSED_BY",player);player thread maps\mp\gametypes\_rank::giveRankXP("defuse");maps\mp\gametypes\_gamescore::givePlayerScore("defuse",player);}onDrop(player){self maps\mp\gametypes\_gameobjects::set2DIcon("friendly","waypoint_bomb");self maps\mp\gametypes\_gameobjects::set3DIcon("friendly","waypoint_bomb");if(!level.bombPlanted){if(isDefined(player)&&isDefined(player.name))printOnTeamArg(&"MP_EXPLOSIVES_DROPPED_BY",game["attackers"],player);}if(level.bombPlanted)return;else playSoundOnPlayers(game["bomb_dropped_sound"],game["attackers"]);}onPickup(player){player.isBombCarrier=true;self maps\mp\gametypes\_gameobjects::set2DIcon("friendly","waypoint_escort");self maps\mp\gametypes\_gameobjects::set3DIcon("friendly","waypoint_escort");if(!level.bombDefused){if(isDefined(player)&&isDefined(player.name))printOnTeamArg(&"MP_EXPLOSIVES_RECOVERED_BY",game["attackers"],player);}playSoundOnPlayers(game["bomb_recovered_sound"],game["attackers"]);}onReset(){}bombPlanted(destroyedObj,player){maps\mp\gametypes\_gamelogic::pauseTimer();level.bombPlanted=true;destroyedObj.visuals[0]thread maps\mp\gametypes\_gamelogic::playTickingSound();level.tickingObject=destroyedObj.visuals[0];level.timeLimitOverride=true;setGameEndTime(int(gettime()+(level.bombTimer*1000)));setDvar("ui_bomb_timer",1);if(!level.multiBomb){level.sdBomb maps\mp\gametypes\_gameobjects::allowCarry("none");level.sdBomb maps\mp\gametypes\_gameobjects::setVisibleTeam("none");level.sdBomb maps\mp\gametypes\_gameobjects::setDropped();level.sdBombModel=level.sdBomb.visuals[0];}else{for(index=0;index<level.players.size;index++){if(isDefined(level.players[index].carryIcon))level.players[index].carryIcon destroyElem();}trace=bulletTrace(player.origin+(0,0,20),player.origin-(0,0,2000),false,player);tempAngle=randomfloat(360);forward=(cos(tempAngle),sin(tempAngle),0);forward=vectornormalize(forward-common_scripts\utility::vector_multiply(trace["normal"],vectordot(forward,trace["normal"])));dropAngles=vectortoangles(forward);level.sdBombModel=spawn("script_model",trace["position"]);level.sdBombModel.angles=dropAngles;level.sdBombModel setModel("prop_suitcase_bomb");}destroyedObj maps\mp\gametypes\_gameobjects::allowUse("none");destroyedObj maps\mp\gametypes\_gameobjects::setVisibleTeam("none");label=destroyedObj maps\mp\gametypes\_gameobjects::getLabel();trigger=destroyedObj.bombDefuseTrig;trigger.origin=level.sdBombModel.origin;visuals=[];defuseObject=maps\mp\gametypes\_gameobjects::createUseObject(game["defenders"],trigger,visuals,(0,0,32));defuseObject maps\mp\gametypes\_gameobjects::allowUse("friendly");defuseObject maps\mp\gametypes\_gameobjects::setUseTime(level.defuseTime);defuseObject maps\mp\gametypes\_gameobjects::setUseText(&"MP_DEFUSING_EXPLOSIVE");defuseObject maps\mp\gametypes\_gameobjects::setUseHintText(&"PLATFORM_HOLD_TO_DEFUSE_EXPLOSIVES");defuseObject maps\mp\gametypes\_gameobjects::setVisibleTeam("any");defuseObject maps\mp\gametypes\_gameobjects::set2DIcon("friendly","waypoint_defuse"+label);defuseObject maps\mp\gametypes\_gameobjects::set2DIcon("enemy","waypoint_defend"+label);defuseObject.label=label;defuseObject.onBeginUse=::onBeginUse;defuseObject.onEndUse=::onEndUse;defuseObject.onUse=::onUseDefuseObject;BombTimerWait();setDvar("ui_bomb_timer",0);destroyedObj.visuals[0]maps\mp\gametypes\_gamelogic::stopTickingSound();if(level.gameEnded||level.bombDefused)return;level.bombExploded=true;explosionOrigin=level.sdBombModel.origin;level.sdBombModel hide();if(isdefined(player))destroyedObj.visuals[0]radiusDamage(explosionOrigin,512,200,20,player);else destroyedObj.visuals[0]radiusDamage(explosionOrigin,512,200,20);rot=randomfloat(360);explosionEffect=spawnFx(level._effect["bombexplosion"],explosionOrigin+(0,0,50),(0,0,1),(cos(rot),sin(rot),0));triggerFx(explosionEffect);PlayRumbleOnPosition("grenade_rumble",explosionOrigin);earthquake(0.75,2.0,explosionOrigin,2000);thread playSoundinSpace("exp_suitcase_bomb_main",explosionOrigin);if(isDefined(destroyedObj.exploderIndex))exploder(destroyedObj.exploderIndex);for(index=0;index<level.bombZones.size;index++)level.bombZones[index]maps\mp\gametypes\_gameobjects::disableObject();defuseObject maps\mp\gametypes\_gameobjects::disableObject();setGameEndTime(0);wait 0.2;sd_endGame(game["attackers"],game["strings"]["target_destroyed"]);}BombTimerWait(){level endon("game_ended");level endon("bomb_defused");maps\mp\gametypes\_hostmigration::waitLongDurationWithGameEndTimeUpdate(level.bombTimer);}bombDefused(){level.tickingObject maps\mp\gametypes\_gamelogic::stopTickingSound();level.bombDefused=true;setDvar("ui_bomb_timer",0);level notify("bomb_defused");wait 0.2;setGameEndTime(0);sd_endGame(game["defenders"],game["strings"]["bomb_defused"]);}